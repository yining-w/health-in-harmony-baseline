bh2 == "Simple" ~ FALSE,
TRUE ~ NA
)) %>%
mutate_at(.vars = c("bh5", "bh7"),
~case_when(
. == "Oui" ~ TRUE,
. == "Non" ~ FALSE,
TRUE ~ NA
))
bool_questions = c("bh2", "total", "Percentage of twins", "Fertility",
"bh5", "total", "Percentage of children alive", "Child mortality",
"bh7", "alive", "Percentage of children living at home", "Fertility")
bool_questions = matrix(bool_questions, ncol = 4, byrow = TRUE)
#Function to compute the sum and total for each question in each village
bool_type <- function(df, col){
#Creating the new dataframe
df <- df %>% select(village_code, all_of(col)) %>%
group_by(village_code) %>%
summarise_all(.funs = list(value = ~ sum(., na.rm = TRUE),
total = ~ sum(!is.na(.))))
return(df)
}
#Apply the bool_type function to each column in bool_questions
bool_df <- apply(bool_questions, 1, function(x){
bool_type(historique_naissance, x[1]) %>%
mutate(question = x[3],
topic = x[4])
})
#From list to dataframe
bool_df <- bind_rows(bool_df) %>%
select(village_code, topic, question, value, total) %>%
mutate(type = "Percentage")
############################################################################
# Average ##################################################################
############################################################################
#COlumns need to be numerical
#NA means no response (be careful because some NA need to be change to 0)
historique_naissance <- historique_naissance %>%
mutate_at(.vars = c("bh4m", "bh9m"),
~fct_recode(.,
"January" = "JANVIER",
"February" = "FÉVRIER",
"March" = "MARS",
"April" = "AVRIL",
"May" = "MAI",
"June" = "JUIN",
"July" = "JUILLET",
"August" = "AOUT",
"September" = "SEPTEMBRE",
"October" = "OCTOBRE",
"November" = "NOVEMBRE",
"December" = "DECEMBRE",
NULL = "NSP",
NULL = "NON REPONSE"
)) %>%
mutate(bh4m_temp = ifelse(!is.na(bh4y) & is.na(bh4m), 1, bh4m),
bh9m_temp = ifelse(!is.na(bh9a) & is.na(bh9m), 1, bh9m),
birth_date =  ymd(paste(bh4y, bh4m_temp, bh4y/bh4y, sep= '-')),
death_date =  ymd(paste(bh9a, bh9m_temp, bh9a/bh9a, sep= '-')),
death_age = interval(birth_date, death_date) / years(1)
) %>%
select(-bh4m_temp, -bh9m_temp)
avg_questions = c("bh6", "Average children age", "Fertility", #Alive
"death_age", "Average age children die", "Child mortality") #Dea
avg_questions = matrix(avg_questions, ncol = 3, byrow = TRUE)
#Transform the matrix to dataframe
avg_questions = as.data.frame(avg_questions)
names(avg_questions) <- c("variable", "question", "topic")
#Calculating the total column
avg_df_total <- historique_naissance %>%
select(village_code, avg_questions[,1]) %>%
group_by(village_code) %>%
summarise_all(~sum(!is.na(.))) %>%
gather(key = "variable", value = "total", -village_code)
#Calculating the average column
avg_df_avg <- historique_naissance %>%
select(village_code, avg_questions[,1]) %>%
group_by(village_code) %>%
summarise_all(~mean(., na.rm = TRUE)) %>%
gather(key = "variable", value = "value", -village_code)
#Join the two dataframes
avg_df <- avg_df_avg %>% left_join(avg_df_total, by = c("village_code", "variable")) %>%
mutate(value = ifelse(!is.nan(value), value, NA)) %>%
left_join(avg_questions, by = "variable") %>%
select(-variable) %>%
select(village_code, topic, question, value, total) %>%
mutate(type = "Average")
###############################################################################
# Categorical one column ######################################################
###############################################################################
#Columns needs to factor, with all the levels
#NA means no response
#Matirx with the categorical questions in just one column
historique_naissance <- historique_naissance %>%
mutate(bh3 = fct_recode(bh3,
"Male" = "Garçon",
"Female" = "Fille"),
bh10 = fct_recode(bh10,
"Fever" = "Fièvre",
"Malaria" = "Paludisme",
"Diarrhea" = "Diarrhée",
"ARI" = "IRA",
"Convulsion" = "Convulsion",
"Accident" = "Accident",
"Dehydration" = "Déshydratation",
"Failure to eat" = "Défaut de manger",
"Witchcraft" = "La sorecellerie",
"God’s will" = "La volonté de Dieu",
"Other" = "Autres",
NULL = "NSP",
NULL = "Non reponse")
)
cat_question_1c = c("bh3", "Children sex", "Fertility",
"bh4m",  "Birth month of children", "Fertility",
#"bh4y",  "Birth year of children", "Fertility",
"bh9m", "Month of children death", "Child mortality",
#"bh9a", "Year of children death", "Child mortality",
"bh10", "Cause of children death", "Child mortality")
cat_question_1c = matrix(cat_question_1c , ncol = 3, byrow = TRUE)
#Function to create the dataframe
cat_1c_type <- function(df, col){
#Computes the sum and total per village and category
df_one <- df %>%
select(village_code, {{col}}) %>%
filter_all(all_vars(!is.na(.))) %>%
group_by(village_code) %>%
mutate(total = n()) %>%
group_by_all() %>%
summarise(sum = n(),
total = mean(total)) %>%
rename(categories = {{col}})
#Firstly, creates a dataframe with all the combinations (village, category)
#and then it does the join with df_one
df <- crossing(df["village_code"], categories = levels(df[,col])) %>%
left_join(unique(df_one[,c("village_code", "total")], by = c("village_code")))  %>%
left_join(df_one[,c("village_code", "categories", "sum")],
by = c("village_code", "categories")) %>%
mutate(sum = ifelse(!is.na(sum), sum, 0),
total = ifelse(!is.na(total), total, 0))
return(df)
}
#Apply the function cat_1c_type to each column
cat_1c_df <- apply(cat_question_1c, 1, function(x){
cat_1c_type(historique_naissance, x[1]) %>%
mutate(question = x[2],
topic = x[3])
})
#From listo to dataframe
cat_1c_df <- bind_rows(cat_1c_df) %>%
select(village_code, topic, question, categories, sum, total)
###################################################################################
# Final changes ###################################################################
###################################################################################
#Save categorical
saveRDS(cat_1c_df, file = here("Baseline_Survey/preprocessing/historique_naissance_cat.rds"))
#rbind boolean df and average df
df_num <- rbind(bool_df, avg_df)
#Save it
saveRDS(df_num, file = here("Baseline_Survey/preprocessing/historique_naissance_num.rds"))
historique_naissance_cat <- readRDS("C:/Github/health-in-harmony-baseline-/Baseline_Survey/preprocessing/historique_naissance_cat.rds")
View(historique_naissance_cat)
historique_naissance_num <- readRDS("C:/Github/health-in-harmony-baseline-/Baseline_Survey/preprocessing/historique_naissance_num.rds")
View(historique_naissance_num)
unique(menage$fs9)
menage %>% unique(fs9)
library(tidyverse)
menage %>% unique(fs9)
# Remote White Space ########################
dfList <- list(menage)
dfList <- lapply(dfList, function(x) {
cols = names(x)[vapply(x, is.character, logical(1))]
x[,cols] <- lapply(x[,cols], trimws)
x
} )
menage = dfList[[1]]
menage[] <- lapply(menage, type.convert, as.is = TRUE)
load("~/GitHub/health-in-harmony-baseline-/Baseline_Survey/data/MENAGE.RData")
# Remote White Space ########################
dfList <- list(menage)
dfList <- lapply(dfList, function(x) {
cols = names(x)[vapply(x, is.character, logical(1))]
x[,cols] <- lapply(x[,cols], trimws)
x
} )
menage = dfList[[1]]
menage[] <- lapply(menage, type.convert, as.is = TRUE)
#Changing the name of administrative columns
##Remove unecessary administrative columns
menage <- menage %>% select(c(-hh3, -hh2, -hh6, -hh6a,
-hh7, -hh7a, -hh8, -hh8a,
-hh9, -hh9a, -hh4,
-hh5jj, -hh5mm, -hh5mm,
-hh5aa, -hh11hh, -hh11mn,
-hh46_autre, -hhaux,
-hh47, -hh56hh, -hh56mn,
-finhh, -fs6ay, -fs6az, -uf26x
))
## Remove "Specify other" / aggregate of 'check all' questions
menage <- menage %>% select(-contains(c("autre", "nr")),-ws6, -st4, -uf3, -fs6a, -fs5b, -tn18b)
menage <- menage %>% rename(village_code = hh1,
village_name = hh1a,
reserve_section = hhstrate,
permission = hh12,
completeness= hh46,
household_members= hh48,
women15T49 = hh49,
children_U5 = hh51,
women15T49_c = hh53,
children_U5_c = hh55) %>%
##make boolean
mutate_at(.vars=c("hc13", "hc14a", "hc14b",
"hc7","fs1", "fs2", "fs3",
"fs4", "fs7a", "fs7b", "fs7x",
"uf1", "uf10", "uf12",
"uf27", "uf28", "fs11", "hc16", "st6a", "st6b", "st6c",
"uf17"),
~case_when(
. == "OUI, TRES MENACE" ~ TRUE,
. == "OUI, PEU MENACE",
. == "Sometimes" ~ TRUE,
. == "TRADITIONNEL" ~ TRUE,
. == "MODERNE" ~ FALSE,
. == "Oui, en dehors du reseau (Génerateur/panneau solaire/système isolé)" ~ TRUE,
. == "Oui, connecté au reseau public" ~ TRUE,
. == "Oui" ~ TRUE,
. == "OUI" ~ TRUE,
. == "NON" ~ FALSE,
. == "Non" ~ FALSE,
. == "No" ~ FALSE,
. == "Yes, Often" ~ TRUE,
. == "Yes, Sometimes" ~ TRUE,
. == "Yes, Rarely" ~ TRUE,
. == "No, Never" ~ TRUE,
. == "OUI, SOUVENT / TRES" ~ TRUE,
. == "Oui, rarement" ~ TRUE,
. == "OUI, QUELQUEFOIS/UN PEU"
. == "NON/JAMAIS" ~ FALSE,
. == "Pas Sure" ~ FALSE,
. == "Ne Sait Pas" ~ FALSE,
. == "Bonne" ~ TRUE,
. == "Mauvaise" ~ FALSE,
. == "Eat" ~ TRUE
. == "Treatment" ~ FALSE,
. == "NON REPONSE" ~ NA,
TRUE ~ NA
)) %>%
##when there is a letter TRUE else NA
mutate_at(.vars = c("ws6a",
"ws6b",
"ws6c",
"ws6d",
"ws6e",
"ws6f",
"ws6x",
"tn8ba",
"tn8bb",
"tn8bc",
"tn8bd",
"tn8bx",
"st4a",
"st4b",
"st4c",
"st4d",
"st4e",
"st4f",
"st4g",
'st4h',
"st4i",
"st4j",
"st4k",
"st4l",
"st4m",
"st4n",
"st4o",
"st4x",
"fs6aa",
"fs6ab",
"fs6ac",
'fs6ad',
"fs6ae",
"fs6af",
"fs6ag",
'fs6ah',
'fs6ai',
'fs6aj',
'fs6ak',
'fs6al',
"uf3a",
"uf3b",
"uf3c",
"uf3d",
"uf3e",
"uf3f",
"uf3g",
"uf3h",
"uf3i",
"uf3j",
"uf3x",
"uf26a",
"uf26b",
"uf26c",
"uf26d",
"uf26e"),
~ case_when(
grepl('[A-Z]', .) ~ TRUE,
!is.na(.) ~ FALSE,
TRUE ~ NA,
))
menage <- menage %>% rename(village_code = hh1,
village_name = hh1a,
reserve_section = hhstrate,
permission = hh12,
completeness= hh46,
household_members= hh48,
women15T49 = hh49,
children_U5 = hh51,
women15T49_c = hh53,
children_U5_c = hh55) %>%
##make boolean
mutate_at(.vars=c("hc13", "hc14a", "hc14b",
"hc7","fs1", "fs2", "fs3",
"fs4", "fs7a", "fs7b", "fs7x",
"uf1", "uf10", "uf12",
"uf27", "uf28", "fs11", "hc16", "st6a", "st6b", "st6c",
"uf17"),
~case_when(
. == "OUI, TRES MENACE" ~ TRUE,
. == "OUI, PEU MENACE" ~ TRUE,
. == "Sometimes" ~ TRUE,
. == "TRADITIONNEL" ~ TRUE,
. == "MODERNE" ~ FALSE,
. == "Oui, en dehors du reseau (Génerateur/panneau solaire/système isolé)" ~ TRUE,
. == "Oui, connecté au reseau public" ~ TRUE,
. == "Oui" ~ TRUE,
. == "OUI" ~ TRUE,
. == "NON" ~ FALSE,
. == "Non" ~ FALSE,
. == "No" ~ FALSE,
. == "Yes, Often" ~ TRUE,
. == "Yes, Sometimes" ~ TRUE,
. == "Yes, Rarely" ~ TRUE,
. == "No, Never" ~ TRUE,
. == "OUI, SOUVENT / TRES" ~ TRUE,
. == "Oui, rarement" ~ TRUE,
. == "OUI, QUELQUEFOIS/UN PEU"
. == "NON/JAMAIS" ~ FALSE,
. == "Pas Sure" ~ FALSE,
. == "Ne Sait Pas" ~ FALSE,
. == "Bonne" ~ TRUE,
. == "Mauvaise" ~ FALSE,
. == "Eat" ~ TRUE
. == "Treatment" ~ FALSE,
. == "NON REPONSE" ~ NA,
TRUE ~ NA
)) %>%
##when there is a letter TRUE else NA
mutate_at(.vars = c("ws6a",
"ws6b",
"ws6c",
"ws6d",
"ws6e",
"ws6f",
"ws6x",
"tn8ba",
"tn8bb",
"tn8bc",
"tn8bd",
"tn8bx",
"st4a",
"st4b",
"st4c",
"st4d",
"st4e",
"st4f",
"st4g",
'st4h',
"st4i",
"st4j",
"st4k",
"st4l",
"st4m",
"st4n",
"st4o",
"st4x",
"fs6aa",
"fs6ab",
"fs6ac",
'fs6ad',
"fs6ae",
"fs6af",
"fs6ag",
'fs6ah',
'fs6ai',
'fs6aj',
'fs6ak',
'fs6al',
"uf3a",
"uf3b",
"uf3c",
"uf3d",
"uf3e",
"uf3f",
"uf3g",
"uf3h",
"uf3i",
"uf3j",
"uf3x",
"uf26a",
"uf26b",
"uf26c",
"uf26d",
"uf26e"),
~ case_when(
grepl('[A-Z]', .) ~ TRUE,
!is.na(.) ~ FALSE,
TRUE ~ NA,
))
menage <- menage %>% rename(village_code = hh1,
village_name = hh1a,
reserve_section = hhstrate,
permission = hh12,
completeness= hh46,
household_members= hh48,
women15T49 = hh49,
children_U5 = hh51,
women15T49_c = hh53,
children_U5_c = hh55) %>%
##make boolean
mutate_at(.vars=c("hc13", "hc14a", "hc14b",
"hc7","fs1", "fs2", "fs3",
"fs4", "fs7a", "fs7b", "fs7x",
"uf1", "uf10", "uf12",
"uf27", "uf28", "fs11", "hc16", "st6a", "st6b", "st6c",
"uf17"),
~case_when(
. == "OUI, TRES MENACE" ~ TRUE,
. == "OUI, PEU MENACE" ~ TRUE,
. == "Sometimes" ~ TRUE,
. == "TRADITIONNEL" ~ TRUE,
. == "MODERNE" ~ FALSE,
. == "Oui, en dehors du reseau (Génerateur/panneau solaire/système isolé)" ~ TRUE,
. == "Oui, connecté au reseau public" ~ TRUE,
. == "Oui" ~ TRUE,
. == "OUI" ~ TRUE,
. == "NON" ~ FALSE,
. == "Non" ~ FALSE,
. == "No" ~ FALSE,
. == "Yes, Often" ~ TRUE,
. == "Yes, Sometimes" ~ TRUE,
. == "Yes, Rarely" ~ TRUE,
. == "No, Never" ~ TRUE,
. == "OUI, SOUVENT / TRES" ~ TRUE,
. == "Oui, rarement" ~ TRUE,
. == "OUI, QUELQUEFOIS/UN PEU"
. == "NON/JAMAIS" ~ FALSE,
. == "Pas Sure" ~ FALSE,
. == "Ne Sait Pas" ~ FALSE,
. == "Bonne" ~ TRUE,
. == "Mauvaise" ~ FALSE,
. == "Eat" ~ TRUE
. == "Treatment" ~ FALSE,
. == "NON REPONSE" ~ NA,
TRUE ~ NA
))
menage <- menage %>% rename(village_code = hh1,
village_name = hh1a,
reserve_section = hhstrate,
permission = hh12,
completeness= hh46,
household_members= hh48,
women15T49 = hh49,
children_U5 = hh51,
women15T49_c = hh53,
children_U5_c = hh55) %>%
##make boolean
mutate_at(.vars=c("hc13", "hc14a", "hc14b",
"hc7","fs1", "fs2", "fs3",
"fs4", "fs7a", "fs7b", "fs7x",
"uf1", "uf10", "uf12",
"uf27", "uf28", "fs11", "hc16", "st6a", "st6b", "st6c",
"uf17"),
~case_when(
. == "OUI, TRES MENACE" ~ TRUE,
. == "OUI, PEU MENACE" ~ TRUE,
. == "Sometimes" ~ TRUE,
. == "TRADITIONNEL" ~ TRUE,
. == "MODERNE" ~ FALSE,
. == "Oui, en dehors du reseau (Génerateur/panneau solaire/système isolé)" ~ TRUE,
. == "Oui, connecté au reseau public" ~ TRUE,
. == "Oui" ~ TRUE,
. == "OUI" ~ TRUE,
. == "NON" ~ FALSE,
. == "Non" ~ FALSE,
. == "No" ~ FALSE,
. == "Yes, Often" ~ TRUE,
. == "Yes, Sometimes" ~ TRUE,
. == "Yes, Rarely" ~ TRUE,
. == "No, Never" ~ TRUE,
. == "OUI, SOUVENT / TRES" ~ TRUE,
. == "Oui, rarement" ~ TRUE,
# . == "OUI, QUELQUEFOIS/UN PEU"
#  . == "NON/JAMAIS" ~ FALSE,
. == "Pas Sure" ~ FALSE,
. == "Ne Sait Pas" ~ FALSE,
. == "Bonne" ~ TRUE,
. == "Mauvaise" ~ FALSE,
. == "Eat" ~ TRUE
. == "Treatment" ~ FALSE,
. == "NON REPONSE" ~ NA,
TRUE ~ NA
))
unique(menage$fs9)
