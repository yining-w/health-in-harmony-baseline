-hh5aa, -hh11hh, -hh11mn,
-hh46_autre, -hhaux,
-hh47, -hh56hh, -hh56mn,
-finhh
))
## Remove "Specify other" / aggregate of 'check all' questions
menage <- menage %>% select(-contains(c("autre", "nr")),ws6, st4, uf3, fs6a, tn18b)
View(menage)
menage = dfList[[1]]
#Changing the name of administrative columns
##Remove unecessary administrative columns
menage <- menage %>% select(c(-hh3, -hh2, -hh6, -hh6a,
-hh7, -hh7a, -hh8, -hh8a,
-hh9, -hh9a, -hh4,
-hh5jj, -hh5mm, -hh5mm,
-hh5aa, -hh11hh, -hh11mn,
-hh46_autre, -hhaux,
-hh47, -hh56hh, -hh56mn,
-finhh
))
## Remove "Specify other" / aggregate of 'check all' questions
menage <- menage %>% select(-contains(c("autre", "nr")),-ws6, -st4, -uf3, -fs6a, -tn18b)
##Rename Administrative info
menage <- menage %>% rename(village_code = hh1,
village_name = hh1a,
reserve_section = hhstrate,
permission = hh12,
completeness= hh46,
household_members= hh48,
women15T49 = hh49,
children_U5 = hh51,
women15T49_c = hh53,
children_U5_c = hh55)
## Change Completeness
menage <- menage %>% mutate(completeness = ifelse(completeness == "Complet√©", 1, 0))
menage <- menage %>% mutate(completeness = ifelse(permission == "OUI", 1, 0))
##Rename vars
menage <- menage %>% rename(cat_material_floor = hc1,
cat_material_roof = hc2,
cat_material_wall = hc3,
cat_material_stove = hc4a,
cat_material_stove_fuel = hc4b,
cat_cook_location = hc5,
bool_owns_cellphone = hc6a,
bool_owns_show = hc6b,
bool_owns_bicycle = hc6c,
bool_owns_motorcycle = hc6d,
bool_owns_boat = hc6e,
bool_owns_net = hc6f,
bool_owns_animal = hc6g,
bool_owns_truck = hc6h,
bool_owns_motorboat = hc6i,
bool_owns_plow = hc6j,
bool_owns_sewingmachine =hc6k,
bool_owns_tractor = hc6l,
bool_has_electricity = hc7,
bool_owns_land = hc8,
cat_titled_land = hc9,
numeric_hectare_owned = hc10,
numeric_pct_agr = hc11,
bool_grows_irrigated_rice = hc12a,
bool_grows_rainfed_rice = hc12b,
bool_grows_cassava_rice = hc12c,
bool_grows_potato_rice = hc12d,
bool_grows_cashcrop = hc12e,
bool_grows_other = hc12x,
bool_grows_traditional_rice = hc13,
bool_grows_traditional_irrigated = hc14a,
bool_grows_traditional_rainbed = hc14b,
numeric_months_production_irrigated = hc15a,
numeric_months_production_rainfed = hc15b,
bool_slash = hc16,
numeric_cows = hc20a,
numeric_zebus = hc20b,
numeric_goats = hc20c,
numeric_sheep = hc20d,
numeric_chickens = hc20e,
numeric_pigs = hc20f,
numeric_poultry = hc20g,
numeric_other = hc20x,
bool_owns_shoes = hc21,
bool_owns_landline = hc22a,
bool_owns_radio = hc22b,
bool_owns_table = hc22c,
bool_owns_chair = hc22d,
bool_owns_reads = hc22e,
bool_owns_sofa = hc22f,
bool_owns_tv = hc22g,
bool_owns_cdplayer = hc22h,
numeric_rooms = hc23,
bool_owns_tablet = hc24,
bool_has_internet = hc26,
bool_has_bankaccount = hc27,
cat_main_income = hc28,
numeric_total_income = hc29,
cat_water_drinking = ws1,
cat_water_other = ws2,
cat_water_location = ws3,
numeric_water_duration = ws4,
cat_water_safe = ws5,
alpha_bool_water_boil = ws6a,
alpha_bool_water_bleach = ws6b,
alpha_bool_water_cloth = ws6c,
alpha_bool_water_filter = ws6d,
alpha_bool_water_solar = ws6e,
alpha_bool_water_disinfection = ws6f,
alpha_bool_water_other = ws6x,
cat_toilet_type = ws7,
bool_mosq_net = tn1,
numeric_mosq_net_number = tn2,
bool_mosq_net_reason_scared = tn17a,
bool_mosq_net_reason_fish = tn17b,
bool_mosq_net_reason_poultry = tn17c,
bool_mosq_net_reason_other = tn17x,
bool_avoid_mosq_ways = tn18a,
alpha_bool_mosq_otherway_spray = tna8ba,
alpha_bool_mosq_otherway_puddles = tn18bb,
alpha_bool_mosq_otherway_bushes = tn18bc,
alpha_bool_mosq_otherway_repell = tn18bd,
alpha_bool_mosq_otherway_other = tn18bx,
bool_health_diarrhea = st1,
bool_health_fever = st2,
bool_health_cough = st3,
alpha_bool_health_hospital = st4a,
alpha_bool_health_center = st4b,
alpha_bool_health_post = st4c,
alpha_bool_health_comm = st4d,
alpha_bool_health_clinic = st4e,
alpha_bool_health_public_other = st4f,
alpha_bool_health_private_clinic = st4g,
alpha_bool_health_private_dr = st4h,
alpha_bool_health_pharmacy = st4i,
alpha_bool_health_officer = st4j,
alpha_bool_health_mobile = st4k,
alpha_bool_health_private_other = st4l,
alpha_bool_health_family = st4m,
alpha_bool_health_shop = st4n,
alpha_bool_health_traditional = st4o,
alpha_bool_health_other = st4x,
bool_health_treat = st5,
bool_health_cost_transport = st6a,
bool_health_cost_medicine = st6b,
bool_health_cost_service = st6c,
bool_health_cost_afford = st7,
bool_health_cost_main_transport = st8a,
bool_health_cost_main_medicine = st8b,
bool_health_cost_main_service = st8c,
bool_health_cost_main_other = st8x,
bool_food_supply = fs1,
bool_food_runout = fs2,
bool_food_hungry = fs3,
bool_food_skipmeals = fs4,
bool_food_norice = fs5a,
alpha_bool_food_january = fs6aa,
alpha_bool_food_february = fs6ab,
alpha_bool_food_march = fs6ac,
alpha_bool_food_april = fs6ad,
alpha_bool_food_may = fs6ae,
alpha_bool_food_june = fs6af,
alpha_bool_food_july = fs6ag,
alpha_bool_food_august = fs6ah,
alpha_bool_food_september = fs6ai,
alpha_bool_food_october = fs6aj,
alpha_bool_food_november = fs6ak,
alpha_bool_food_december = fs6al,
alpha_bool_food_dontknow = fs6ay,
alpha_bool_food_notconcerned = fs6az,
numeric_food_months = fs6b,
bool_food_eatpotatos = fs7a,
bool_food_eatvia = fs7b,
bool_food_eatother = fs7x,
bool_food_soldassets = fs8,
bool_food_sold_specify =fs9,
bool_food_care_or_eat = fs10,
alt_bool_food_care_or_eat_choice = fs11,
bool_forest_entered = uf1,
bool_forest_coastalplottwo = uf2a,
bool_forest_plotone = uf2b,
bool_forest_classified = uf2c,
alpha_bool_forest_reason_rice = uf3a,
alpha_bool_forest_reason_mahampy = uf3b,
alpha_bool_forest_reason_travel = uf3c,
alpha_bool_forest_reason_hunting = uf3d,
alpha_bool_forest_reason_cuttree = uf3e,
alpha_bool_forest_reason_collecttree = uf3f,
alpha_bool_forest_reason_fruitgathering = uf3g,
alpha_bool_forest_reason_catchbird = uf3h,
alpha_bool_forest_reason_harvestdonkey = uf3i,
alpha_bool_forest_reason_digtavolo = uf3j,
alpha_bool_forest_reason_other = uf3x,
cat_forest_cut = uf4,
cat_forest_honey_method = uf5,
bool_forest_reason_other_rice = uf6a,
bool_forest_reason_other_mahampy = uf6b,
bool_forest_reason_other_travel = uf6c,
bool_forest_reason_other_hunting = uf6d,
bool_forest_reason_other_cuttree = uf6e,
bool_forest_reason_other_collecttree = uf6f,
bool_forest_reason_other_fruitgathering = uf6g,
bool_forest_reason_other_catchbird = uf6h,
bool_forest_reason_other_harvestdonkey = uf6i,
bool_forest_reason_other_digtavolo = uf6j,
bool_forest_reason_other_other = uf6x,
cat_forest_other_cut = uf7,
cat_forest_other_honey_method = uf8,
bool_forest_notentered_noneed = uf9a,
bool_forest_notentered_notauthorized = uf9b,
bool_forest_notentered_fear = uf9c,
bool_forest_notentered_opportunity = uf9d,
bool_forest_notentered_far = uf9e,
bool_forest_notentered_other = uf9x,
bool_forest_pay_healthcare = uf10,
cat_forest_closest = uf11,
bool_forest_rules = uf12,
bool_forest_advantages = uf13,
bool_forest_advantages_water = uf14a,
bool_forest_advantages_protein = uf14b,
bool_forest_advantages_construction = uf14c,
bool_forest_advantages_firewood = uf14d,
bool_forest_advantages_fruit = uf14e,
bool_forest_advantages_seeds = uf14f,
bool_forest_advantages_medicine = uf14g,
bool_forest_advantages_cleanair = uf14h,
bool_forest_advantages_rain = uf14i,
bool_forest_advantages_shade = uf14j,
bool_forest_advantages_tourism = uf14k,
bool_forest_advantages_cultural = uf14l,
bool_forest_advantages_other = uf14x,
bool_forest_downsides = uf15,
bool_forest_downsides_disease = uf16a,
bool_forest_downsides_animals = uf16b,
bool_forest_downsides_spirits = uf16c,
bool_forest_downsides_insects = uf16d,
bool_forest_downsides_restriction = uf16e,
bool_forest_downsides_fire = uf16f,
bool_forest_downsides_other = uf16x,
bool_forest_threatened = uf17,
bool_forest_threats_cuttingtrees = uf19a,
bool_forest_threats_fires = uf19b,
bool_forest_threats_agricultureburnt = uf19c,
bool_forest_threats_wetrice = uf19d,
bool_forest_threats_charcoal = uf19e,
bool_forest_threats_hunt = uf19f,
bool_forest_threats_other = uf19x,
bool_forest_protect = uf20,
bool_forest_protect_water = uf21a,
bool_forest_protect_mosquitos = uf21b,
bool_forest_protect_tourism = uf21c,
bool_forest_protect_rain = uf21d,
bool_forest_protect_shade = uf21e,
bool_forest_protect_agriculture = uf21f,
bool_forest_acceptable_cuttrees = uf22,
bool_forest_acceptable_no_endanger = uf23a,
bool_forest_acceptable_no_various = uf23b,
bool_forest_acceptable_no_sell = uf23c,
bool_forest_acceptable_no_illegal = uf23d,
bool_forest_acceptable_no_customary = uf23e,
bool_forest_acceptable_no_other = uf23x,
bool_forest_acceptable_yes_endanger = uf24a,
bool_forest_acceptable_yes_various = uf24b,
bool_forest_acceptable_yes_needs = uf24c,
bool_forest_acceptable_yes_house = uf24d,
bool_forest_acceptable_yes_customary = uf24e,
bool_forest_acceptable_yes_other = uf24x,
bool_forest_eat_lemur = uf25,
alpha_bool_forest_stop_ifcosts = uf26a,
alpha_bool_forest_stop_ifcosts_no = uf26b,
alpha_bool_forest_stop_ifcosts_notcuttingtrees = uf26c,
alpha_bool_forest_stop_ifcosts_nothunting = uf26d,
alpha_bool_forest_stop_ifcosts_stillneed = uf26e,
alpha_bool_forest_stop_ifcosts_other = uf26x,
bool_forest_good = uf27,
bool_forest_future = uf28)
#change all the uppercase
menage <- mutate_all(menage, .funs=toupper)
# change all Oui/Non #############################################################
menage = menage %>% mutate_at(.vars=vars(starts_with("bool_")),
~ifelse(grepl('OUI', ., ignore.case=TRUE), 1, 0))
menage = menage %>% mutate_at(.vars=vars(starts_with("alpha_")),
~ifelse(grepl('', .), 0, 1))
menage = menage %>% mutate_at(.vars=vars(starts_with("alt_")),
~ifelse(grepl('SOINS', .), "CARE", "EAT"))
?is.numeric
test = menage %>% mutate_if(is.numeric,as.numeric(as.character()))
test = menage %>% mutate_if(is.numeric, funs(. as.numeric(as.character()))
test = menage %>% mutate_if(is.numeric, funs(. as.numeric(as.character())))
test = menage %>% mutate_if(is.numeric, funs(as.numeric(as.character())))
test = menage %>% mutate_at(.vars=vars(starts_with("numeric_")),
as.numeric(as.character()))
test = menage %>% mutate_at(.vars=vars(starts_with("numeric_")),
as.numeric(as.character(.vars)))
v=do.call(paste, menage[startsWith(names(menage), 'numeric')]) ## check all that apply
v=menage[startsWith(names(menage), 'numeric')] ## check all that apply
View(v)
v=list(menage[startsWith(names(menage), 'numeric')]) ## check all that apply
View(v)
v=startsWith(names(menage), 'numeric') ## check all that apply
v=menage
v =as.numeric(as.character(startsWith(names(menage), 'numeric'))) ## check all that apply
v =v[as.numeric(as.character(startsWith(names(menage), 'numeric')))] ## check all that apply
v=menage
v =v[as.numeric(as.character(startsWith(names(menage), 'numeric')))] ## check all that apply
v =names(startsWith(names(menage), 'numeric'))) ## check all that apply
v =names(startsWith(names(menage), 'numeric')) ## check all that apply
menage <- menage %>% mutate(permission = ifelse(permission == "OUI", 1, 0))
unique(menage$cat_material_floor)
count(unique(menage$cat_material_floor))
tally(unique(menage$cat_material_floor))
nrow(unique(menage$cat_material_floor))
length(unique(menage$cat_material_floor))
n(unique(menage$cat_material_floor))
summarize(unique(count=n(menage$cat_material_floor)))
menage %>% group_by(cat_material_floor) %>% summarize(count=n())
##count unique
menage %>% group_by(cat_material_roof) %>% summarize(count=n())
menage %>% group_by(cat_material_roof) %>% summarize(count=n())
menage %>% group_by(cat_material_wall) %>% summarize(count=n())
menage %>% group_by(cat_material_stove) %>% summarize(count=n())
menage %>% group_by(cat_material_stove_fuel) %>% summarize(count=n())
menage %>% group_by(cat_cook_location) %>% summarize(count=n())
menage %>% group_by(cat_titled_land) %>% summarize(count=n())
menage %>% group_by(cat_main_income) %>% summarize(count=n())
menage$cat_main_income
unique(menage$cat_main_income)
menage %>% group_by(cat_water_drinking) %>% summarize(count=n())
unique(menage$cat_main_income)
unique(menage$cat_water_drinking)
cat_water_drinking == 'EAU DE SURFACE (RIVIERE, BARRAGE, LAC, MARE, COURANT, CANAL, SYSTEME D?IRRIGATION)' ~ 'Surface water',
cat_water_drinking == 'PUITS CREUSE: PAS PROTEGE' ~ 'Protected hollow well',
cat_water_drinking == 'PUITS CREUSE: PAS PROTEGE' ~ 'Unprotected hollow well',
cat_water_drinking == 'EAU CONDITIONNEE: EAU EN BOUTEILLE' ~ 'Conditioned bottled water',
cat_water_drinking == 'PUITS CREUSE: PROTEGE' ~ 'Hollow well',
cat_water_drinking == 'ROBINET: DANS LA CONCESSION/JARDIN/ PARCELLE' ~ 'Tap in the garden',
cat_water_drinking == 'ROBINET: DANS LE LOGEMENT' ~ 'Tap in the housing',
cat_water_drinking == 'ROBINET: ROBINET PUBLIC/BORNE FONTAINE' ~ 'Public tap or fountain terminal',
cat_water_drinking == 'PUITS A POMPE/FORAGE' ~ 'Pump or drilling wells'),
cat_water_other == as.character(cat_water_other),
cat_water_other == case_when(cat_water_other == '',
unique(menage$cat_water_other)
unique(menage$cat_water_other)
unique(menage$cat_water_other)
cat_water_drinking == 'EAU DE SURFACE (RIVIERE, BARRAGE, LAC, MARE, COURANT, CANAL, SYSTEME D?IRRIGATION)' ~ 'Surface water',
cat_water_drinking == 'PUITS CREUSE: PAS PROTEGE' ~ 'Protected hollow well',
cat_water_drinking == 'PUITS CREUSE: PAS PROTEGE' ~ 'Unprotected hollow well',
cat_water_drinking == 'EAU CONDITIONNEE: EAU EN BOUTEILLE' ~ 'Conditioned bottled water',
cat_water_drinking == 'PUITS CREUSE: PROTEGE' ~ 'Hollow well',
cat_water_drinking == 'ROBINET: DANS LA CONCESSION/JARDIN/ PARCELLE' ~ 'Tap in the garden',
cat_water_drinking == 'ROBINET: DANS LE LOGEMENT' ~ 'Tap in the housing',
cat_water_drinking == 'ROBINET: ROBINET PUBLIC/BORNE FONTAINE' ~ 'Public tap or fountain terminal',
cat_water_drinking == 'PUITS A POMPE/FORAGE' ~ 'Pump or drilling wells'),
cat_water_other == as.character(cat_water_other),
cat_water_other == case_when(cat_water_other == 'SOURCE: SOURCE NON PROTEGEE' ~ 'unprotected source'),
cat_water_location == as.character(cat_water_location),
unique(menage$cat_water_location)
unique(menage$cat_toilet_type)
cat_water_drinking == 'EAU DE SURFACE (RIVIERE, BARRAGE, LAC, MARE, COURANT, CANAL, SYSTEME D?IRRIGATION)' ~ 'Surface water',
cat_water_drinking == 'PUITS CREUSE: PAS PROTEGE' ~ 'Protected hollow well',
cat_water_drinking == 'PUITS CREUSE: PAS PROTEGE' ~ 'Unprotected hollow well',
cat_water_drinking == 'EAU CONDITIONNEE: EAU EN BOUTEILLE' ~ 'Conditioned bottled water',
cat_water_drinking == 'PUITS CREUSE: PROTEGE' ~ 'Hollow well',
cat_water_drinking == 'ROBINET: DANS LA CONCESSION/JARDIN/ PARCELLE' ~ 'Tap in the garden',
cat_water_drinking == 'ROBINET: DANS LE LOGEMENT' ~ 'Tap in the housing',
cat_water_drinking == 'ROBINET: ROBINET PUBLIC/BORNE FONTAINE' ~ 'Public tap or fountain terminal',
cat_water_drinking == 'PUITS A POMPE/FORAGE' ~ 'Pump or drilling wells'),
cat_water_other == as.character(cat_water_other),
cat_water_other == case_when(cat_water_other == 'SOURCE: SOURCE NON PROTEGEE' ~ 'unprotected source'),
cat_water_location == as.character(cat_water_location),
cat_water_location == case_when(cat_water_location == 'AILLEURS' ~ 'Elsewhere',
cat_water_location == 'DANS LEUR LOGEMENT' ~ 'In their accommodation',
cat_water_location == 'DANS LEUR JARDIN/PARCELLE' ~ 'In the garden'),
cat_toilet_type == as.character(cat_toilet_type),
cat_toilet_type == case_when(cat_toilet_type == 'PAS DE TOILETTES/ NATURE/CHAMPS',
cat_toilet_type == 'LATRINE A FOSSE : LATRINE A FOSSE SANS DALLE/FOSSE OUVERTE' ~ 'Open pit',
cat_toilet_type == 'LATRINE A FOSSE : LATRINE A FOSSE AVEC DALLE NON LAVABLE' ~ 'non washable slab',
cat_toilet_type == 'LATRINE A FOSSE : LATRINE A FOSSE AVEC DALLE LAVABLE' ~ 'washable slab',
cat_toilet_type == 'AUTRE' ~ 'Other',
cat_toilet_type == 'TOILETTES SUSPENDUES/LATRINES SUSPENDUES' ~ 'Suspended toilets',
cat_toilet_type == 'CHASSE D?EAU : RELIE AUX LATRINES' ~ 'Water flush connected to latrines',
cat_toilet_type =="CHASSE D?EAU : RELIE A L'AIR LIBRE" ~ 'Water flush connected to free air'),
unique(menage$cat_forest_cut)
cat_water_drinking == 'EAU DE SURFACE (RIVIERE, BARRAGE, LAC, MARE, COURANT, CANAL, SYSTEME D?IRRIGATION)' ~ 'Surface water',
cat_water_drinking == 'PUITS CREUSE: PAS PROTEGE' ~ 'Protected hollow well',
cat_water_drinking == 'PUITS CREUSE: PAS PROTEGE' ~ 'Unprotected hollow well',
cat_water_drinking == 'EAU CONDITIONNEE: EAU EN BOUTEILLE' ~ 'Conditioned bottled water',
cat_water_drinking == 'PUITS CREUSE: PROTEGE' ~ 'Hollow well',
cat_water_drinking == 'ROBINET: DANS LA CONCESSION/JARDIN/ PARCELLE' ~ 'Tap in the garden',
cat_water_drinking == 'ROBINET: DANS LE LOGEMENT' ~ 'Tap in the housing',
cat_water_drinking == 'ROBINET: ROBINET PUBLIC/BORNE FONTAINE' ~ 'Public tap or fountain terminal',
cat_water_drinking == 'PUITS A POMPE/FORAGE' ~ 'Pump or drilling wells'),
cat_water_other == as.character(cat_water_other),
cat_water_other == case_when(cat_water_other == 'SOURCE: SOURCE NON PROTEGEE' ~ 'unprotected source'),
cat_water_location == as.character(cat_water_location),
cat_water_location == case_when(cat_water_location == 'AILLEURS' ~ 'Elsewhere',
cat_water_location == 'DANS LEUR LOGEMENT' ~ 'In their accommodation',
cat_water_location == 'DANS LEUR JARDIN/PARCELLE' ~ 'In the garden'),
cat_toilet_type == as.character(cat_toilet_type),
cat_toilet_type == case_when(cat_toilet_type == 'PAS DE TOILETTES/ NATURE/CHAMPS',
cat_toilet_type == 'LATRINE A FOSSE : LATRINE A FOSSE SANS DALLE/FOSSE OUVERTE' ~ 'Open pit',
cat_toilet_type == 'LATRINE A FOSSE : LATRINE A FOSSE AVEC DALLE NON LAVABLE' ~ 'non washable slab',
cat_toilet_type == 'LATRINE A FOSSE : LATRINE A FOSSE AVEC DALLE LAVABLE' ~ 'washable slab',
cat_toilet_type == 'AUTRE' ~ 'Other',
cat_toilet_type == 'TOILETTES SUSPENDUES/LATRINES SUSPENDUES' ~ 'Suspended toilets',
cat_toilet_type == 'CHASSE D?EAU : RELIE AUX LATRINES' ~ 'Water flush connected to latrines',
cat_toilet_type =="CHASSE D?EAU : RELIE A L'AIR LIBRE" ~ 'Water flush connected to free air'),
cat_forest_cut == as.character(cat_forest_cut),
cat_forest_cut == case_when(cat_forest_cut == "BOIS DE CONSTRUCTION" ~ "Construction wood",
cat_forest_cut == "AUTRE" ~ "Other",
cat_forest_cut == "CONSTRUCTION DE PIROGUE" ~ "Pirogue Construction"),
unique(menage$cat_forest_honey_method)
cat_water_drinking == 'EAU DE SURFACE (RIVIERE, BARRAGE, LAC, MARE, COURANT, CANAL, SYSTEME D?IRRIGATION)' ~ 'Surface water',
cat_water_drinking == 'PUITS CREUSE: PAS PROTEGE' ~ 'Protected hollow well',
cat_water_drinking == 'PUITS CREUSE: PAS PROTEGE' ~ 'Unprotected hollow well',
cat_water_drinking == 'EAU CONDITIONNEE: EAU EN BOUTEILLE' ~ 'Conditioned bottled water',
cat_water_drinking == 'PUITS CREUSE: PROTEGE' ~ 'Hollow well',
cat_water_drinking == 'ROBINET: DANS LA CONCESSION/JARDIN/ PARCELLE' ~ 'Tap in the garden',
cat_water_drinking == 'ROBINET: DANS LE LOGEMENT' ~ 'Tap in the housing',
cat_water_drinking == 'ROBINET: ROBINET PUBLIC/BORNE FONTAINE' ~ 'Public tap or fountain terminal',
cat_water_drinking == 'PUITS A POMPE/FORAGE' ~ 'Pump or drilling wells'),
cat_water_other == as.character(cat_water_other),
cat_water_other == case_when(cat_water_other == 'SOURCE: SOURCE NON PROTEGEE' ~ 'unprotected source'),
cat_water_location == as.character(cat_water_location),
cat_water_location == case_when(cat_water_location == 'AILLEURS' ~ 'Elsewhere',
cat_water_location == 'DANS LEUR LOGEMENT' ~ 'In their accommodation',
cat_water_location == 'DANS LEUR JARDIN/PARCELLE' ~ 'In the garden'),
cat_toilet_type == as.character(cat_toilet_type),
cat_toilet_type == case_when(cat_toilet_type == 'PAS DE TOILETTES/ NATURE/CHAMPS',
cat_toilet_type == 'LATRINE A FOSSE : LATRINE A FOSSE SANS DALLE/FOSSE OUVERTE' ~ 'Open pit',
cat_toilet_type == 'LATRINE A FOSSE : LATRINE A FOSSE AVEC DALLE NON LAVABLE' ~ 'non washable slab',
cat_toilet_type == 'LATRINE A FOSSE : LATRINE A FOSSE AVEC DALLE LAVABLE' ~ 'washable slab',
cat_toilet_type == 'AUTRE' ~ 'Other',
cat_toilet_type == 'TOILETTES SUSPENDUES/LATRINES SUSPENDUES' ~ 'Suspended toilets',
cat_toilet_type == 'CHASSE D?EAU : RELIE AUX LATRINES' ~ 'Water flush connected to latrines',
cat_toilet_type =="CHASSE D?EAU : RELIE A L'AIR LIBRE" ~ 'Water flush connected to free air'),
cat_forest_cut == as.character(cat_forest_cut),
cat_forest_cut == case_when(cat_forest_cut == "BOIS DE CONSTRUCTION" ~ "Construction wood",
cat_forest_cut == "AUTRE" ~ "Other",
cat_forest_cut == "CONSTRUCTION DE PIROGUE" ~ "Pirogue Construction"),
cat_forest_honey_method == as.character(cat_forest_honey_method),
cat_forest_honey_method == case_when(cat_forest_other_honey_method == "EN ENFUMANT LES ABEILLES" ~ "Smoking the bees",
cat_forest_other_honey_method == "EN RECOLTANT SIMPLEMENT DANS L'ARBRE" ~ "Harvesting"),
unique(menage$cat_forest_other_cut)
cat_water_drinking == 'EAU DE SURFACE (RIVIERE, BARRAGE, LAC, MARE, COURANT, CANAL, SYSTEME D?IRRIGATION)' ~ 'Surface water',
cat_water_drinking == 'PUITS CREUSE: PAS PROTEGE' ~ 'Protected hollow well',
cat_water_drinking == 'PUITS CREUSE: PAS PROTEGE' ~ 'Unprotected hollow well',
cat_water_drinking == 'EAU CONDITIONNEE: EAU EN BOUTEILLE' ~ 'Conditioned bottled water',
cat_water_drinking == 'PUITS CREUSE: PROTEGE' ~ 'Hollow well',
cat_water_drinking == 'ROBINET: DANS LA CONCESSION/JARDIN/ PARCELLE' ~ 'Tap in the garden',
cat_water_drinking == 'ROBINET: DANS LE LOGEMENT' ~ 'Tap in the housing',
cat_water_drinking == 'ROBINET: ROBINET PUBLIC/BORNE FONTAINE' ~ 'Public tap or fountain terminal',
cat_water_drinking == 'PUITS A POMPE/FORAGE' ~ 'Pump or drilling wells'),
cat_water_other == as.character(cat_water_other),
cat_water_other == case_when(cat_water_other == 'SOURCE: SOURCE NON PROTEGEE' ~ 'unprotected source'),
cat_water_location == as.character(cat_water_location),
cat_water_location == case_when(cat_water_location == 'AILLEURS' ~ 'Elsewhere',
cat_water_location == 'DANS LEUR LOGEMENT' ~ 'In their accommodation',
cat_water_location == 'DANS LEUR JARDIN/PARCELLE' ~ 'In the garden'),
cat_toilet_type == as.character(cat_toilet_type),
cat_toilet_type == case_when(cat_toilet_type == 'PAS DE TOILETTES/ NATURE/CHAMPS',
cat_toilet_type == 'LATRINE A FOSSE : LATRINE A FOSSE SANS DALLE/FOSSE OUVERTE' ~ 'Open pit',
cat_toilet_type == 'LATRINE A FOSSE : LATRINE A FOSSE AVEC DALLE NON LAVABLE' ~ 'non washable slab',
cat_toilet_type == 'LATRINE A FOSSE : LATRINE A FOSSE AVEC DALLE LAVABLE' ~ 'washable slab',
cat_toilet_type == 'AUTRE' ~ 'Other',
cat_toilet_type == 'TOILETTES SUSPENDUES/LATRINES SUSPENDUES' ~ 'Suspended toilets',
cat_toilet_type == 'CHASSE D?EAU : RELIE AUX LATRINES' ~ 'Water flush connected to latrines',
cat_toilet_type =="CHASSE D?EAU : RELIE A L'AIR LIBRE" ~ 'Water flush connected to free air'),
cat_forest_cut == as.character(cat_forest_cut),
cat_forest_cut == case_when(cat_forest_cut == "BOIS DE CONSTRUCTION" ~ "Construction wood",
cat_forest_cut == "AUTRE" ~ "Other",
cat_forest_cut == "CONSTRUCTION DE PIROGUE" ~ "Pirogue Construction"),
cat_forest_honey_method == as.character(cat_forest_honey_method),
cat_forest_honey_method == case_when(cat_forest_other_honey_method == "EN ENFUMANT LES ABEILLES" ~ "Smoking the bees",
cat_forest_other_honey_method == "EN RECOLTANT SIMPLEMENT DANS L'ARBRE" ~ "Harvesting"),
cat_forest_other_cut == as.character(cat_forest_other_cut),
cat_forest_other_cut == case_when(cat_forest_other_cut == "BOIS DE CONSTRUCTION" ~ "Construction Wood",
cat_forest_other_cut == "CHARBON DE BOIS" ~ "Charcoal",
cat_forest_other_cut == "BOIS DE CHAUFFAGE" ~ "Firewood",
cat_forest_other_cut == "CONSTRUCTION DE PIROGUE" ~ "Pirogue construction"),
unique(menage$cat_forest_other_honey_method)
## Make numeric
index <- sapply(menage, is.numeric)
## Make numeric
index <- sapply(menage, startsWith(names(menage), 'numeric'))
## Make numeric
numericnames <- menage %>% select_if(startsWith(names(menage), 'numeric'))
## Make numeric
numericnames <- menage %>% select_if(startsWith(names(menage), 'numeric')) %>% colnames()
moustiquaire[numericnames] <- as.numeric(as.character(moustiquaire[numericnames]))
test = menage
test[numericnames] <- as.numeric(as.character(test[numericnames]))
View(test)
test = menage
as.numeric(as.character[test$numericnames])
as.numeric(as.character[numericnames])
test <- lapply(test,function(x) if(x in numericnames) as.numeric)
test <- lapply(test,function(x) if(x==numericnames) as.numeric)
?contains
test[numericnames] <- lapply(as.numeric(as.character(test[numericnames])
View(test)
View(test)
test = menage
test[numericnames] <- lapply(as.numeric(as.character(test[numericnames])))
test[numericnames] <- as.numeric(as.character(test[numericnames]))
test = menage
test = menage
test[, (numericnames) := lapply(.SD, function(x) as.numeric(as.character(x))), .SDcols=numericnames]
library(data.table)
test[, (numericnames) := lapply(.SD, function(x) as.numeric(as.character(x))), .SDcols=numericnames]
test = menage
test[] <- lapply(test, type.convert, as.is = TRUE)
## check the result
sapply(test, class)
View(test)
