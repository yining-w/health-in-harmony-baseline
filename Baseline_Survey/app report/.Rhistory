. == "MAUVAISE" ~ FALSE,
. == "EAT" ~ TRUE,
. == "TREATMENT" ~ FALSE,
. == "NON REPONSE" ~ NA,
TRUE ~ NA
))
menage <- menage %>%
mutate_at(.vars = c("ws6a",
"ws6b",
"ws6c",
"ws6d",
"ws6e",
"ws6f",
"ws6x",
"tna8ba",
"tn18bb",
"tn18bc",
"tn18bd",
"tn18bx",
"st4a",
"st4b",
"st4c",
"st4d",
"st4e",
"st4f",
"st4g",
'st4h',
"st4i",
"st4j",
"st4k",
"st4l",
"st4m",
"st4n",
"st4o",
"st4x",
"fs6aa",
"fs6ab",
"fs6ac",
'fs6ad',
"fs6ae",
"fs6af",
"fs6ag",
'fs6ah',
'fs6ai',
'fs6aj',
'fs6ak',
'fs6al',
"uf3a",
"uf3b",
"uf3c",
"uf3d",
"uf3e",
"uf3f",
"uf3g",
"uf3h",
"uf3i",
"uf3j",
"uf3x",
"uf26a",
"uf26b",
"uf26c",
"uf26d",
"uf26e"),
~ case_when(
grepl('[A-Z]', .) ~ TRUE,
!is.na(.) ~ FALSE,
TRUE ~ NA,
))
## Change Completeness
menage <- menage %>% mutate(completeness = ifelse(completeness == "Completé", "Complete", "Incomplete"))
#Function to create the dataframe
cat_1c_type <- function(df, col){
#Computes the sum and total per village and category
df_one <- df %>% filter(completeness == "Complete") %>%
select(village_code, {{col}}) %>%
filter_all(all_vars(!is.na(.))) %>%
group_by(village_code) %>%
mutate(total = n()) %>%
group_by_all() %>%
summarise(sum = n(),
total = mean(total)) %>%
rename(categories = {{col}})
#Firstly, creates a dataframe with all the combinations (village, category)
#and then it does the join with df_one
df <- crossing(df["village_code"], categories = levels(df[,col])) %>%
left_join(unique(df_one[,c("village_code", "total")], by = c("village_code")))  %>%
left_join(df_one[,c("village_code", "categories", "sum")],
by = c("village_code", "categories")) %>%
mutate(sum = ifelse(!is.na(sum), sum, 0),
total = ifelse(!is.na(total), total, 0))
return(df)
}
#Apply the function cat_1c_type to each column
cat_1c_df <- apply(cat_question_1c, 1, function(x){
cat_1c_type(menage, x[1]) %>%
mutate(question = x[2],
topic = x[3])
})
View(cat_question_1c)
View(cat_question_1c)
View(cat_question_1c)
#Apply the function cat_1c_type to each column
cat_1c_df <- apply(cat_question_1c, 1, function(x){
cat_1c_type(menage, x[1]) %>%
mutate(question = x[2],
topic = x[3])
})
#Function to create the dataframe
cat_1c_type <- function(df, col){
#Computes the sum and total per village and category
df_one <- df %>% filter(completeness == "Complete") %>%
select(village_code, {{col}}) %>%
filter_all(all_vars(!is.na(.))) %>%
group_by(village_code) %>%
mutate(total = n()) %>%
group_by_all() %>%
summarise(sum = n(),
total = mean(total)) %>%
rename(categories = {{col}})
#Firstly, creates a dataframe with all the combinations (village, category)
#and then it does the join with df_one
df <- crossing(df["village_code"], categories = levels(df[,col])) %>%
left_join(unique(df_one[,c("village_code", "total")], by = c("village_code")))  %>%
left_join(df_one[,c("village_code", "categories", "sum")],
by = c("village_code", "categories")) %>%
mutate(sum = ifelse(!is.na(sum), sum, 0),
total = ifelse(!is.na(total), total, 0))
return(df)
}
#Apply the function cat_1c_type to each column
cat_1c_df <- apply(cat_question_1c, 1, function(x){
cat_1c_type(menage, x[1]) %>%
mutate(question = x[2],
topic = x[3])
})
rlang::last_error()
#Apply the function cat_1c_type to each column
cat_1c_df <- apply(cat_question_1c, 1, function(x){
cat_1c_type(menage, x[1]) %>%
mutate(question = x[2],
topic = x[3])
})
#Function to create the dataframe
cat_1c_type <- function(df, col){
#Computes the sum and total per village and category
df_one <- df %>% filter(completeness == "Complete") %>%
select(village_code, {{col}}) %>%
filter_all(all_vars(!is.na(.))) %>%
group_by(village_code) %>%
mutate(total = n()) %>%
group_by_all() %>%
summarise(sum = n(),
total = mean(total)) %>%
rename(categories = {{col}})
#Firstly, creates a dataframe with all the combinations (village, category)
#and then it does the join with df_one
df <- crossing(df["village_code"], categories = levels(df[,col])) %>%
left_join(unique(df_one[,c("village_code", "total")], by = c("village_code")))  %>%
left_join(df_one[,c("village_code", "categories", "sum")],
by = c("village_code", "categories")) %>%
mutate(sum = ifelse(!is.na(sum), sum, 0),
total = ifelse(!is.na(total), total, 0))
return(df)
}
#Apply the function cat_1c_type to each column
cat_1c_df <- apply(cat_question_1c, 1, function(x){
cat_1c_type(menage, x[1]) %>%
mutate(question = x[2],
topic = x[3])
})
#Function to create the dataframe
cat_1c_type <- function(df, col){
#Computes the sum and total per village and category
df_one <- df %>% filter(completeness == "Complete") %>%
select(village_code, {{col}}) %>%
filter_all(all_vars(!is.na(.))) %>%
group_by(village_code) %>%
mutate(total = n()) %>%
group_by_all() %>%
summarise(sum = n(),
total = mean(total)) %>%
rename(categories = {{col}})
#Firstly, creates a dataframe with all the combinations (village, category)
#and then it does the join with df_one
df <- crossing(df["village_code"], categories = levels(df[,col])) %>%
left_join(unique(df_one[,c("village_code", "total")], by = c("village_code")))  %>%
left_join(df_one[,c("village_code", "categories", "sum")],
by = c("village_code", "categories")) %>%
mutate(sum = ifelse(!is.na(sum), sum, 0),
total = ifelse(!is.na(total), total, 0))
return(df)
}
#Apply the function cat_1c_type to each column
cat_1c_df <- apply(cat_question_1c, 1, function(x){
cat_1c_type(menage, x[1]) %>%
mutate(question = x[2],
topic = x[3])
})
menage_check = menage %>% select(c(hc1, hc2, hc3, hc4a, hc4b, hc5, hc9, hc28, ws1,
ws7, fs9, uf4, uf5, uf7, uf8, uf11))
View(menage_check)
menage_check = menage %>% select(c(hc1, hc2, hc3, hc4a, hc4b, hc5, hc9, hc28, ws1,
ws7, fs9, uf4, uf5, uf7, uf8, uf11, village_code,
completeness))
menage_check = menage_check[!is.na(menage_check)]
View(menage_test)
#Function to create the dataframe
cat_1c_type <- function(df, col){
#Computes the sum and total per village and category
df_one <- df %>% filter(completeness == "Complete") %>%
select(village_code, {{col}}) %>%
filter_all(all_vars(!is.na(.))) %>%
group_by(village_code) %>%
mutate(total = n()) %>%
group_by_all() %>%
summarise(sum = n(),
total = mean(total)) %>%
rename(categories = {{col}})
#Firstly, creates a dataframe with all the combinations (village, category)
#and then it does the join with df_one
df <- crossing(df["village_code"], categories = levels(df[,col])) %>%
left_join(unique(df_one[,c("village_code", "total")], by = c("village_code")))  %>%
left_join(df_one[,c("village_code", "categories", "sum")],
by = c("village_code", "categories")) %>%
mutate(sum = ifelse(!is.na(sum), sum, 0),
total = ifelse(!is.na(total), total, 0))
return(df)
}
#Apply the function cat_1c_type to each column
cat_1c_df <- apply(cat_question_1c, 1, function(x){
cat_1c_type(menage_check, x[1]) %>%
mutate(question = x[2],
topic = x[3])
})
menage_check = menage %>% select(c(hc1, hc2, hc3, hc4a, hc4b, hc5, hc9, hc28, ws1,
ws7, fs9, uf4, uf5, uf7, uf8, uf11, village_code,
completeness))
menage_check = menage_check[!is.na(menage_check)]
menage_check = menage %>% select(c(hc1, hc2, hc3, hc4a, hc4b, hc5, hc9, hc28, ws1,
ws7, fs9, uf4, uf5, uf7, uf8, uf11, village_code,
completeness))
menage_check = na.omit(menage_check)
menage_check = menage %>% select(c(hc1, hc2, hc3, hc4a, hc4b, hc5, hc9, hc28, ws1,
ws7, fs9, uf4, uf5, uf7, uf8, uf11, village_code,
completeness))
menage_check = na.omit(menage_check)
menage_check = menage %>% select(c(hc1, hc2, hc3, hc4a, hc4b, hc5, hc9, hc28, ws1,
ws7, fs9, uf4, uf5, uf7, uf8, uf11, village_code,
completeness))
View(menage_check)
###############################################################################
# Categorical one column ######################################################
###############################################################################
#Columns needs to factor, with all the levels
#NA means no response
#Matirx with the categorical questions in just one column
menage = menage %>% select(-c(uf18)) ## all NAs
menage <- menage %>%
mutate(
hc1 = ifelse(hc1 %in% c("NSP", "NON RESPONSE"), NA_character_, as.character(hc1)),
hc1 = fct_recode(hc1,
"Mat" = "NATTE",
"Bamboo" = "PALME  BAMBOU",
"Ceramic Tiles" = "CARRELAGE EN CERAMIQUE",
"Earth  Sand" = "TERRE  SABLE",
"Wood Planks" = "PLANCHES DE BOIS",
"Polished Wood" = 'PARQUET EN BOIS OU BOIS POLI',
'Dung' = "BOUSE",
"Cement"= "CIMENT",
"Vinyl or Asphalt Strips" = 'BANDES DE VINYLE OU D?ASPHALTE',
'Carpet or Rug' = 'MOQUETTE  TAPIS'),
hc1 = factor(hc1, levels = c("Mat",
"Bamboo",
"Ceramic Tiles",
"Earth / Sand",
"Wood Planks",
"Polished Wood",
"Dung",
"Cement",
"Vinyl or Asphalt Strips",
"Carpet or Rug")),
hc2 = ifelse(hc2 == "NON REPONSE", NA_character_, as.character(hc2)),
hc2 = fct_recode(hc2,
"Mat" = "NATTE",
"Bamboo" = "CHAUME  FEUILLE DE PALME PALMIER  BAMBOU  ZOZORO",
"Grass" = "MOTTES D'HERBES",
"Wood Planks" = "PLANCHES DE BOIS",
"Metal or Aluminium" = "TOLE  METAL  ALUMINIUM",
"No Roof" = "PAS DE TOIT"),
hc2 = factor(hc2, levels = c("Mat", "Bamboo", "Grass",
"Wood Planks", "Metal or Aluminium", "No Roof")),
hc3 = ifelse(hc3 == "NON REPONSE", NA_character_, as.character(hc3)),
hc3 = fct_recode(hc3,
"Bamboo" = "CANE  PALME  TRONCS  ZOZORO",
"No wall" = "PAS DE MURS",
"Plates" = "CONTRE PLAQUE",
"Mud" = "BOUE",
"Wood Planks" = "PLANCHES DE BOISBARDEUX",
"Uncovered Adobe" = "ADOBE NON RECOUVERTBANCO",
"Other" = "AUTRE"),
hc3 = factor(hc3, levels = c("Bamboo", "No wall", "Plates", "Mud", "Wood Planks",
"Uncovered Adobe", "Other")),
hc4a = ifelse(hc4a == "NON REPONSE", NA_character_, as.character(hc4a)),
hc4a = fct_recode(hc4a,
"Open fire" = "Feu sur Trois pierres  feu ouvert",
"Traditional solid fuel stove" = "Cuisiniere traditionnelle a combustible solide",
"Solar cooker" = "Cuisiniere solaire",
"Solid Fuel Stove" = "Cuisiniere a combustible solide",
"No meal prepared" = "PAS DE REPAS PRÉPARÉ DANS MENAGE",
"Liquid Fuel Cooker" = "Cuisiniere a combustible liquide",
"Liquid Gas Cooker" = "Cuisiniere a gaz liquide (GPL)"),
hc4a = factor(hc4a, levels = c("Open fire", "Traditional solid fuel stove",
"Solar cooker", "Solid Fuel Stove", "No meal prepared",
"Liquid Fuel Cooker", "Liquid Gas Cooker")),
hc4b = ifelse(hc4b == "NON REPONSE", NA_character_, as.character(hc4b)),
hc4b = fct_recode(hc4b,
"Wood" = "BOIS",
"Biomass" = "BIOMASS MANUFACTUREE (GRANULES) OU COPEAUX DE BOIS",
"Charcoal" = "CHARBON DE BOIS",
"Animal Waste" = "BOUSE D?ANIMAUX  DECHETS",
"Grass" = "RESIDUS AGRICOLES  HERBES PAILLES ARBUSTES",
"Diesel" = "ESSENCE  DIESEL",
"Alcohol" = "ALCOOL  ETHANOL",
"Petroleum" = "PETROLE  PARAFFINE"),
hc4b = factor(hc4b, levels = c("Wood", "Biomass", "Charcoal",
"Animal Waste", "Grass", "Diesel",
"Alcohol", "Petroleum")),
hc5 = ifelse(hc5 == "NON REPONSE", NA_character_, as.character(hc5)),
hc5 = fct_recode(hc5,
"In a non separate room in the main house" = "DANS LA MAISON PRINCIPALE  DANS UNE PIECE NON SEPAREE",
"In a separate room in the main house" = "DANS LA MAISON PRINCIPALE  DANS UNE PIECE SEPARE",
"In a separate building" = "DANS UN BATIMENT SEPARE",
"Outside on a veranda or a covered porch" = "DEHORS  SUR UNE VERANDA OU UN PORCHE COUVERT",
"Outdoors" = "DEHORS A LAIR LIBRE"),
hc5 = factor(hc5, levels = c("In a non separate room in the main house",
"In a separate room in the main house",
"In a separate building",
"Outside on a veranda or a covered porch",
"Outdoors")),
hc9 = ifelse(hc4b == "NON REPONSE", NA_character_, as.character(hc4b)),
hc9 = fct_recode(hc9,
"No titles" = "AUCUN TITREES",
"Partially titled" = "PARTIELLEMENT TITREES",
"Totally titled" = "TOUS TITREES"),
hc9 = factor(hc9, levels = c("No titles", "Partially titled", "Totally titled")),
hc28 = ifelse(hc28 == "Non Reponse", NA_character_, as.character(hc28)),
hc28 = fct_recode(hc28,
"Other" = 'AUTRE',
'Employed' = 'EMPLOYÉ  (GOUVERNEMENT, ONG, AUTRE?)',
'No income' = 'PAS DE REVENU',
"Small Business Owner" = "PROPRIÉTAIRE D'UNE PETITE ENTREPRISE",
"Sell honey"='VENDRE DU MIEL',
"Sell crafts" = "VENTE D'ARTISANAT",
'Sell wood' = 'VENTE DE BOIS',
"Sell other forest products" = "VENTE D'AUTRES PRODUITS FORESTIERS",
"Sell firewood" =  "VENTE DE BOIS DE CHAUFFAGE",
"Sell charcoal" =  "VENTE DE CHARBON DEBOIS",
"Sell fish" = "VENTE DE POISSON",
"Sell ravinala or thatch" = 'VENTE DE RAVINALA  CHAUME',
"Sell agricultural products" = "VENTE DE PRODUITS AGRICOLES MANIOC TUBERCULES PAR EXEMPLE",
"Sell crops"= "VENTE DE CULTURES DE RENTE CAFÉ VANILLE, CLOU DE GIROFLE PAR EXEMPLE",
"Sell prepared meals"= "VENTE DE PLATS PRÉPARÉS  PLATS FRITS  GÂTEAUX DE POISSON PAR EXEMPLE"),
hc28 = factor(hc28, levels = c("Other", "Employed", "No income",
"Small Business Owner", "Sell honey",
"Sell crafts", "Sell wood",
"Sell other forest products", "Sell firewood",
"Sell charcoal", "Sell fish",
"Sell ravinala or thatch", "Sell agricultural products",
"Sell crops", "Sell prepared meals")),
ws1 = ifelse(ws1 == "NON REPONSE", NA_character_, as.character(ws1)),
ws1 = fct_recode(ws1,
"unprotected source" = 'SOURCE SOURCE NON PROTEGEE',
'protected source' = "SOURCE SOURCE PROTEGEE",
'Surface water' = "EAU DE SURFACE RIVIERE BARRAGE LAC MARE COURANT CANAL SYSTEME D?IRRIGATION",
'Protected hollow well' =  'PUITS CREUSE PAS PROTEGE',
"Unprotected hollow well" =  'PUITS CREUSE PAS PROTEGE',
'Conditioned bottled water' = 'EAU CONDITIONNEE EAU EN BOUTEILLE',
'Hollow well' = 'PUITS CREUSE PROTEGE',
'Tap in the garden' = 'ROBINET DANS LA CONCESSIONJARDIN PARCELLE',
'Tap in the housing' = 'ROBINET DANS LE LOGEMENT',
'Public tap or fountain terminal' = 'ROBINET ROBINET PUBLICBORNE FONTAINE',
'Pump or drilling wells' ='PUITS A POMPEFORAGE'),
ws1 = factor(ws1, levels = c("unprotected source", "protected source",
"Surface water", "Protected hollow well",
"Unprotected hollow well", "Conditioned bottled water",
"Hollow well", "Tap in the garden", "Tap in the housing")),
ws7 = ifelse(ws7 == "NON REPONSE", NA_character_, as.character(ws7)),
ws7 = fct_recode(ws7,
"Livestock" = "BETAIL",
"Goods owned by household" = "BIENS POSSEDES PAR LE MENAGE",
"Land" = "TERRAIN"),
ws7 = factor(ws7, levels = c("Livestock", "Goods owned by household", "Land")),
fs9 = ifelse(fs9 == "NON REPONSE", NA_character_, as.character(fs9)),
fs9 = fct_recode(fs9,
"Nature" = 'PAS DE TOILETTES NATURECHAMPS',
'Open pit' = 'LATRINE A FOSSE  LATRINE A FOSSE SANS DALLEFOSSE OUVERTE',
'non washable slab' = 'LATRINE A FOSSE  LATRINE A FOSSE AVEC DALLE NON LAVABLE',
'washable slab' = 'LATRINE A FOSSE  LATRINE A FOSSE AVEC DALLE LAVABLE',
'Other' =  'AUTRE',
'Suspended toilets' = 'TOILETTES SUSPENDUESLATRINES SUSPENDUES',
'Water flush connected to latrines' =  'CHASSE D?EAU  RELIE AUX LATRINES',
'Water flush connected to free air' = "CHASSE D?EAU  RELIE A L'AIR LIBRE"),
fs9 = factor(fs9, levels = c("Nature", "Open pit",
"non washable slab", "washable slab",
"Other", "Suspended toilets", "Water flush connected to latrines",
"Water flush connected to free air")),
uf4 = ifelse(uf4 == "NON REPONSE", NA_character_, as.character(uf4)),
uf4 = fct_recode(uf4,
"Construction wood" = "BOIS DE CONSTRUCTION",
"Other" = "AUTRE",
"Pirogue Construction" = "CONSTRUCTION DE PIROGUE"),
uf4 = factor(uf4, levels = c("Construction wood", "Other", "Pirogue Construction")),
uf5 = ifelse(uf5 == "NON REPONSE", NA_character_, as.character(uf5)),
uf5 = fct_recode(uf5,
"Smoking the bees" = "EN ENFUMANT LES ABEILLES",
"Harvesting from trees" = "EN RECOLTANT SIMPLEMENT DANS L'ARBRE"),
uf5 = factor(uf5, levels = c("Smoking the Bees", "Harvesting from trees")),
uf7 = ifelse(uf7 == "Non Reponse", NA_character_, as.character(uf7)),
uf7 = fct_recode(uf7,
"Construction Wood" = "BOIS DE CONSTRUCTION",
"Charcoal"= "CHARBON DE BOIS",
"Firewood" = "BOIS DE CHAUFFAGE",
"Pirogue construction" = "CONSTRUCTION DE PIROGUE"),
uf7 = factor(uf7, levels = c("Construction Wood", "Charcoal", "Firewood", "Pirogue construction")),
uf8 = ifelse(uf8 == "Non Reponse", NA_character_, as.character(uf8)),
uf8 = fct_recode(uf8,
"Smoking the bees" = "EN ENFUMANT LES ABEILLES",
"Harvesting from trees" = "EN RECOLTANT SIMPLEMENT DANS L'ARBRE"),
uf8 = factor(uf8,levels = c("Smoking the bees", "Harvesting from trees")),
uf11 = ifelse(uf11 == "NE SAIT PAS", NA_character_, as.character(uf11)),
uf11 = fct_recode(uf11,
"Parcel II" = "PARCELLE II LITTORALE DE LA RESERVE SPECIALE  STRICTE",
"Parcel I" = "PARCELLE I DE LA RESERVE SPECIALE  STRICTE",
"Special Reserve"= "FORET CLASSEE"),
uf11 = factor(uf11, levels = c("Parcel II", "Parcel I", "Special Reserve")))
sapply(menage, class)
#List with categorical questions that are in more than 1 column
#The second column indicates to which group of question they belong
cat_question_1c = c("hc1", "Main Material of Floor", "Household Characteristics",
"hc2", "Main Material of Roof", "Household Characteristics",
"hc3", "Main Material of Floor", "Household Characteristics",
"hc4a", "Main stove for cooking", "Household Characteristics",
"hc4b", "Type of energy for cooker", "Household Characteristics",
"hc5", "Cooking Location", "Household Characteristics",
"hc9", "Land title", "Household Characteristics",
"hc28", "Main income", "Household Characteristics",
"ws1", "Main source of drinking water", "Water and Sanitation",
"ws7", "Toilet Type", "Water and Sanitation",
"fs9", "Assets sold", "Food Supply",
"uf4", "Main reason for cut", "Food supply",
"uf5", "Main Honey collection method", "Food supply",
"uf7", "Other reasons for cut", "Food supply",
"uf8", "Other Honey collecetion method", "Food supply",
"uf11", "Closest foreste", "Forest use"
)
cat_question_1c = matrix(cat_question_1c , ncol = 3, byrow = TRUE)
#Function to create the dataframe
cat_1c_type <- function(df, col){
#Computes the sum and total per village and category
df_one <- df %>% filter(completeness == "Complete") %>%
select(village_code, {{col}}) %>%
filter_all(all_vars(!is.na(.))) %>%
group_by(village_code) %>%
mutate(total = n()) %>%
group_by_all() %>%
summarise(sum = n(),
total = mean(total)) %>%
rename(categories = {{col}})
#Firstly, creates a dataframe with all the combinations (village, category)
#and then it does the join with df_one
df <- crossing(df["village_code"], categories = levels(df[,col])) %>%
left_join(unique(df_one[,c("village_code", "total")], by = c("village_code")))  %>%
left_join(df_one[,c("village_code", "categories", "sum")],
by = c("village_code", "categories")) %>%
mutate(sum = ifelse(!is.na(sum), sum, 0),
total = ifelse(!is.na(total), total, 0))
return(df)
}
#Apply the function cat_1c_type to each column
cat_1c_df <- apply(cat_question_1c, 1, function(x){
cat_1c_type(menage_check, x[1]) %>%
mutate(question = x[2],
topic = x[3])
})
#rlang::last_error()
#From listo to dataframe
cat_1c_df <- bind_rows(cat_1c_df) %>%
select(village_code, topic, question, categories, sum, total)
#Apply the function cat_1c_type to each column
cat_1c_df <- apply(cat_question_1c, 1, function(x){
cat_1c_type(menage, x[1]) %>%
mutate(question = x[2],
topic = x[3])
})
#rlang::last_error()
#From listo to dataframe
cat_1c_df <- bind_rows(cat_1c_df) %>%
select(village_code, topic, question, categories, sum, total)
View(cat_1c_df)
#Save it
saveRDS(df_1c_df, file = here("Baseline_Survey/preprocessing/menage_cat.rds"))
#Save it
saveRDS(cat_1c_df, file = here("Baseline_Survey/preprocessing/menage_cat.rds"))
runApp('GitHub/health-in-harmony-baseline-/Baseline_Survey/app report/app4.R')
setwd("~/GitHub/health-in-harmony-baseline-/Baseline_Survey/app report")
##source(here("Baseline_Survey/app report/global.R"))
source("global.R")
num_df <- list.files(pattern = "*num.rds$",
full.names = TRUE) %>%
map_dfr(readRDS) %>% ungroup()
setwd("~/GitHub/health-in-harmony-baseline-/Baseline_Survey/app report")
runApp('app4.R')
