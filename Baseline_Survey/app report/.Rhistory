?geom_hline
pairwise_eng %>%
ggplot() +
geom_hline(aes(yintercept=median(Score))) +
geom_point(aes(y = Score, x=Rank),color="maroon4") +
facet_wrap(~Theme) +
theme_minimal() +
labs(title="All of the Ideas Visualized by Category",
subtitle = "Each dot represents an idea. The higher the dot, the higher its score/
The further right the dot the higher its rank. The horizontal line indicates the median score.",
caption = "The People's Budget Chicago",
x = "Rank", y = "Score")
pairwise_eng %>%
ggplot() +
geom_hline(aes(yintercept=median(Score)), line = "dashed", color= "maroon4") +
geom_point(aes(y = Score, x=Rank),color="maroon4") +
facet_wrap(~Theme) +
theme_minimal() +
labs(title="All of the Ideas Visualized by Category",
subtitle = "Each dot represents an idea. The higher the dot, the higher its score/
The further right the dot the higher its rank. The horizontal line indicates the median score.",
caption = "The People's Budget Chicago",
x = "Rank", y = "Score")
devecon_stat = read.dta("DEVECON.dta")
install.packages("read.dta")
library(read.dta)
library(haven)
remove(list=ls())
devecon_stat = read.dta("DEVECON_fulldataset.dta")
devecon_stat = read_dta("DEVECON_fulldataset.dta")
View(devecon_stat)
devecon <- read.csv("DEVECON.csv") ##to use for actual data set
devecon_filter = devecon %>% filter(year >= 1988)
library(tidyverse)
devecon_filter = devecon %>% filter(year >= 1988)
## Clean up some stuff I want to use
devecon_filter <- devecon_filter  %>% rename(WB_en_pop_dnst = "popdensity")
## Clean up some stuff I want to use
devecon_filter <- devecon_filter  %>% rename(WB_en_pop_dnst = "popdensity")
devecon_filter <- devecon_filter %>% rename(WB_sl_agr_empl_zs = "agriculturalworkers")
devecon_filter <- devecon_filter %>% rename(WB_sl_ind_empl_zs = "manufacturers")
devecon_filter <- devecon_filter %>% rename(WB_sl_srv_empl_zs = "service")
devecon_filter <- devecon_filter %>% rename(EIU_AGRP = "gdpagric")
devecon_filter <- devecon_filter %>% rename(EIU_INDP = "gdpmanufacturing")
devecon_filter <- devecon_filter %>% rename(EIU_SERP = "gdpservice")
devecon_filter <- devecon_filter %>% mutate(agrproductivity = agriculturalworkers/gdpagric)
## Clean up some stuff I want to use
devecon_filter <- devecon %>% subset.data.frame(select = c(countrycode, regionname, year, lngdppc, WB_ny_gdp_pcap_kd_zg , WB_sp_pop_grow, WB_ny_gdp_mktp_kd_zg, WB_en_pop_dnst, WB_sl_agr_empl_zs , WB_sl_ind_empl_zs , WB_sl_srv_empl_zs,EIU_AGRP,EIU_INDP, EIU_SERP))
devecon_filter <- devecon_filter %>% mutate(lngdppc=log(WB_ny_gdp_pcap_kd))
## Clean up some stuff I want to use
devecon_filter <- devecon_filter %>% subset.data.frame(select = c(countrycode, regionname, year, lngdppc, WB_ny_gdp_pcap_kd_zg , WB_sp_pop_grow, WB_ny_gdp_mktp_kd_zg, WB_en_pop_dnst, WB_sl_agr_empl_zs , WB_sl_ind_empl_zs , WB_sl_srv_empl_zs,EIU_AGRP,EIU_INDP, EIU_SERP))
devecon_filter <- devecon_filter  %>% rename(WB_en_pop_dnst = "popdensity")
#WB_en_pop_dnst = "popdensity"
#WB_sl_agr_empl_zs = "agriculturalworkers"
#WB_sl_ind_empl_zs = "manufacturers"
#WB_sl_srv_empl_zs = "service"
#EIU_AGRP = "gdpagric"
#EIU_INDP = "gdpmanufacturing"
#EIU_SERP = "gdpservice"
devecon_filter <- devecon_filter %>% mutate(agrproductivity = WB_sl_agr_empl_zs/EIU_AGRP)
devecon_filter <- devecon_filter%>%
mutate(manufactureproductivity = WB_sl_ind_empl_zs/EIU_INDP)
devecon_filter <-
devecon_filter %>%
mutate(serviceproductivity = WB_sl_srv_empl_zs/EIU_SERP)
View(devecon_filter)
?melt
library(melt)
library(reshape)
View(devecon_filter)
View(devecon_filter)
View(devecon_filter)
mmr_long <- melt(devecon_filter, id=c("countrycode", "regionname", "year"))
View(mmr_long)
##pivot tables
mmr_long = devecon_filter %>% subset.data.frame(select = c(countrycode, regionname, year, lngdppc,  WB_sl_agr_empl_zs , WB_sl_ind_empl_zs , WB_sl_srv_empl_zs,EIU_AGRP,EIU_INDP, EIU_SERP))
##pivot tables
mmr_long = devecon_filter %>% subset.data.frame(select = c(countrycode, regionname, year, lngdppc,  WB_sl_agr_empl_zs , WB_sl_ind_empl_zs , WB_sl_srv_empl_zs,EIU_AGRP,EIU_INDP, EIU_SERP))
mmr_long <-
mmr_long %>%
mutate(agrproductivity = WB_sl_agr_empl_zs/EIU_AGRP)
mmr_long <-
mmr_long %>%
mutate(manufactureproductivity = WB_sl_ind_empl_zs/EIU_INDP)
mmr_long <-
mmr_long %>%
mutate(serviceproductivity = WB_sl_srv_empl_zs/EIU_SERP)
mmr_long <- melt(devecon_filter, id=c("countrycode", "regionname", "year",
"lngdppc", "WB_sl_agr_emp_zs", "WB_sl_ind_emp_zs",
"WB_sl_srv_empl_zs", "EIU_AGRP", "EIU_INDP", "EIU_SERP"))
##pivot tables
mmr_long = devecon_filter %>% subset.data.frame(select = c(countrycode, regionname, year, lngdppc,  WB_sl_agr_empl_zs , WB_sl_ind_empl_zs , WB_sl_srv_empl_zs,EIU_AGRP,EIU_INDP, EIU_SERP))
mmr_long <-
mmr_long %>%
mutate(agrproductivity = WB_sl_agr_empl_zs/EIU_AGRP)
mmr_long <-
mmr_long %>%
mutate(manufactureproductivity = WB_sl_ind_empl_zs/EIU_INDP)
mmr_long <-
mmr_long %>%
mutate(serviceproductivity = WB_sl_srv_empl_zs/EIU_SERP)
mmr_long <- melt(mmr_long, id=c("countrycode", "regionname", "year",
"lngdppc", "WB_sl_agr_emp_zs", "WB_sl_ind_emp_zs",
"WB_sl_srv_empl_zs", "EIU_AGRP", "EIU_INDP", "EIU_SERP"))
mmr_long <- melt(mmr_long, id=c("countrycode", "regionname", "year",
"lngdppc", "WB_sl_agr_empl_zs", "WB_sl_ind_empl_zs",
"WB_sl_srv_empl_zs", "EIU_AGRP", "EIU_INDP", "EIU_SERP"))
View(mmr_long)
##pivot tables
mmr_long = devecon_filter %>% subset.data.frame(select = c(countrycode, regionname, year, lngdppc,  WB_sl_agr_empl_zs , WB_sl_ind_empl_zs , WB_sl_srv_empl_zs,EIU_AGRP,EIU_INDP, EIU_SERP))
mmr_long <-
mmr_long %>%
mutate(agrproductivity = WB_sl_agr_empl_zs/EIU_AGRP)
mmr_long <-
mmr_long %>%
mutate(manufactureproductivity = WB_sl_ind_empl_zs/EIU_INDP)
mmr_long <-
mmr_long %>%
mutate(serviceproductivity = WB_sl_srv_empl_zs/EIU_SERP)
mmr_long = devecon_filter %>% subset.data.frame(select = c(countrycode, regionname, year, lngdppc,  WB_sl_agr_empl_zs , WB_sl_ind_empl_zs))
mmr_long = devecon_filter %>% subset.data.frame(select = c(countrycode, regionname, year, lngdppc,  WB_sl_agr_empl_zs , WB_sl_ind_empl_zs , WB_sl_srv_empl_zs))
mmr_long_share <- melt(mmr_long, id=c("countrycode", "regionname", "year",
"lngdppc"))
mmr_long_gdp = devecon_filter %>% subset.data.frame(select = c(countrycode, regionname, year, lngdppc,  EIU_AGRP,EIU_INDP, EIU_SERP))
mmr_long_gdp <- melt(mmr_long_gdp, id=c("countrycode", "regionname", "year",
"lngdppc"))
mmr_long_productivity = subset.data.frame(select = c(countrycode, regionname, year, lngdppc,
agrproductivity, manufactureproductivity,
serviceproductivity))
mmr_long_productivity = devecon_filter %.% subset.data.frame(select = c(countrycode, regionname, year, lngdppc,
agrproductivity, manufactureproductivity,
serviceproductivity))
mmr_long_productivity = devecon_filter %>% subset.data.frame(select = c(countrycode, regionname, year, lngdppc,
agrproductivity, manufactureproductivity,
serviceproductivity))
mmr_long_productivity <- melt(mmr_long_productivity, id=c("countrycode", "regionname", "year",
"lngdppc"))
mmr_long_share %>%
filter(year == 2018 & countrycode == "MMR") %>%
ggplot(aes(fill=variable, y=value, x=year)) +
geom_bar(position="dodge", stat="identity") + labs(title = "Employment Distribution in India 2018")
mmr_long_share %>%
filter(year == 2000 & countrycode == "MMR" | year == 2018 & countrycode == "MMR") %>%
ggplot(aes(fill=variable, y=value, x=year)) +
geom_bar(position="dodge", stat="identity") + labs(title = "Employment Distribution in India 2018")
mmr_long_share %>%
filter(year == 2000 & countrycode == "MMR" | year == 2018 & countrycode == "MMR") %>%
ggplot(aes(fill=variable, y=value, x=year)) +
geom_bar(position="dodge", stat="identity") + labs(title = "Employment Distribution in Mynmar",
subtitle = "2000 and 2018")
mmr_long_gdp %>%
filter(year == 2000 & countrycode == "MMR" | year == 2018 & countrycode == "MMR") %>%
ggplot(aes(fill=variable, y=value, x=year)) +
geom_bar(position="dodge", stat="identity") + labs(title = "Employment Distribution in Mynmar",
subtitle = "2000 and 2018")
mmr_long_gdp %>%
filter(year == 2000 & countrycode == "MMR" | year == 2018 & countrycode == "MMR") %>%
ggplot(aes(fill=variable, y=value, x=year)) +
geom_bar(position="dodge", stat="identity") + labs(title = "Employment GDP in Mynmar",
subtitle = "2000 and 2018")
mmr_long_productivity %>%
filter(year == 2000 & countrycode == "MMR" | year == 2018 & countrycode == "MMR") %>%
ggplot(aes(fill=variable, y=value, x=year)) +
geom_bar(position="dodge", stat="identity") + labs(title = "Employment GDP in Mynmar",
subtitle = "2000 and 2018")
mmr_long_productivity %>%
filter(year == 2000 & countrycode == "MMR" | year == 2018 & countrycode == "MMR") %>%
ggplot(aes(fill=variable, y=value, x=year)) +
geom_bar(position="dodge", stat="identity") + labs(title = "Employment Productivity in Mynmar",
subtitle = "2000 and 2018")
library(reshape)
library(stargazer)
library(haven)
df = read_dta("voterfileNC.dta") ## to check variable definitions
df = read_dta("voterfileNC.dta") ## to check variable definitions
View(df)
melt(df, id= -c("voted2004","voted2006", "voted2008", "voted2010"))
lm(voted2006 ~ white, data =df)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/yinin/Downloads")
finance = read.csv("state_legislature_campaign_finance")
finance = read.csv("state_legislature_campaign_finance.csv")
rm(list=ls())
finance = read.csv("state_legislature_campaign_finance.csv")
View(finance)
rownames(finance) <- finance$year
finance %>%
# group_by() %>%
mutate(idx = match(year, unique(year)))
library(tidyverse)
finance %>%
# group_by() %>%
mutate(idx = match(year, unique(year)))
finance = finance %>%
mutate(time = match(year, unique(year)))
View(finance)
unique(year)
unique(finance$year)
unique(nrow(finance$year))
unique(length(finance$year))
unique(finance$year)
unique(finance$year) %>% arrange(desc)
unique(finance$year) %>% arrange(desc(finance$year))
arrange(desc(unique(finance$year)) %>%
arrange(desc(unique(finance$year))) %>%
(unique(finance$year)) %>%
unique(finance$year) %>%
View(finance)
View(finance)
lm(win ~ fin + time, data = finance)
lm(win ~ fin + time + 1, data = finance)
summary(lm(win ~ fin + time + 1, data = finance))
summary(lm(win ~ fin | time + 1, data = finance))
ggplot(finance, aes(x = fin, y=win)) +
geom_smooth(method = "lm", formula = fin~win)
View(finance)
ggplot(finance, aes(x = fin, y=win)) +
geom_smooth(method = "lm", formula = win ~ fin)
summary(lm(fin ~ win, data = finance))
test = finance %>% (year == 1990)
test = finance %>% filter(year == 1990)
ggplot(finance) +
geom_point(aes(y = fin, x = vtsh_margin))
ggplot(finance) +
geom_point(aes(y = fin, x = vtsh_margin + 1))
ggplot(finance) +
geom_point(aes(y = fin, x = vtsh_margin, color = win))
ggplot(finance) +
geom_point(aes(y = fin, x = vtsh_marginXwin, color = win))
ggplot(finance) +
geom_point(aes(y = fin, x = vtsh_margin, color = win))
ggplot(test) +
geom_point(aes(y = fin, x = vtsh_margin, color = win))
ggplot(test) +
geom_point(aes(y = fin, x = vtsh_marginxWin, color = win))
View(test)
ggplot(test) +
geom_point(aes(y = fin, x = vtsh_marginXwin, color = win))
test = finance %>% filter(year == 2010)
ggplot(test) +
geom_point(aes(y = fin, x = vtsh_margin, color = win))
test = finance %>% filter(year == 1992)
ggplot(test) +
geom_point(aes(y = fin, x = vtsh_margin, color = win))
test = finance %>% filter(year == 1990)
ggplot(test) +
geom_point(aes(y = fin, x = vtsh_margin, color = win))
test_two = finance %>% filter(year == 1992)
View(test_two)
test = finance %>% filter(year == 1992)
test_two = finance %>% filter(year == 1994)
View(test_two)
View(test_two)
test = finance %>% filter(year == 1994)
test_two = finance %>% filter(year == 1996)
test_two = finance %>% filter(year == 1995)
test_two = finance %>% filter(year == 1998)
View(test_two)
test = finance %>% filter(year == 1990)
test_two = finance %>% filter(year == 1992)
merge(x = test, y = test_two, by = .(state, dist))
library(data.table)
merge(x = test, y = test_two, by = .(state, dist))
merge(test,test_two, by = .(state, dist))
merge(test,test_two, by = dist)
##index based on unique combination of state and district
finance$idx <- as.integer(interaction(finance$state, finance$dist))
#t
test = finance %>% filter(year == 1990)
#t + 1
test_two = finance %>% filter(year == 1992)
merge(test,test_two, by = idx)
merge(test,test_two, by = "idx")
merge = merge(test,test_two, by = "idx")
View(merge)
#note: .x = 1990, .y = 1992
ggplot(merge) +
geom_point(aes(y =fin.y, x = vtsh_margin.x, color = win))
#note: .x = 1990, .y = 1992
ggplot(merge) +
geom_point(aes(y =fin.y, x = vtsh_margin.x))
#note: .x = 1990, .y = 1992
ggplot(merge) +
geom_point(aes(y =fin.y, x = vtsh_margin.x, color = win.x))
merge
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache = TRUE)
options(digits=3)
# Loading coordinates ---------------------------------------------------------------------
load("gps.RData")
load("~/GitHub/health-in-harmony-baseline-/Baseline_Survey/app report/global.R")
rm(list=ls())
load("~/GitHub/health-in-harmony-baseline-/Baseline_Survey/app report/GPS.RData")
# Loading coordinates ---------------------------------------------------------------------
load("gps.RData")
View(gps)
#Transform GPS data into vector data
lat = gps$gpslat
lon = gps$gpslon
library(shiny); runApp('~/GitHub/health-in-harmony-baseline-/Baseline_Survey/app report/app4.R')
runApp('~/GitHub/health-in-harmony-baseline-/Baseline_Survey/app report/app4.R')
runApp('~/GitHub/health-in-harmony-baseline-/Baseline_Survey/app report/app4.R')
runApp('~/GitHub/health-in-harmony-baseline-/Baseline_Survey/app report/app4.R')
runApp('~/GitHub/health-in-harmony-baseline-/Baseline_Survey/app report/app4.R')
runApp('~/GitHub/health-in-harmony-baseline-/Baseline_Survey/app report/app4.R')
View(gps)
runApp('~/GitHub/health-in-harmony-baseline-/Baseline_Survey/app report/app4.R')
# Loading coordinates ---------------------------------------------------------------------
load(here("Baseline_Survey/data/gps.RData"))
runApp('~/GitHub/health-in-harmony-baseline-/Baseline_Survey/app report/app4.R')
library(shiny)
library(shinydashboard)
library(callr)
library(tidyverse)
library(leaflet)
library(tidyverse)
library(leaflet.extras)
library(viridis)
library(shinyWidgets)
library(shinythemes)
library(rhandsontable)
library(RColorBrewer)
library(sf)
library(shinycssloaders)
library(here)
# Loading coordinates ---------------------------------------------------------------------
load(here("Baseline_Survey/data/gps.RData"))
read_csv(here("Baseline_Survey/data/gps.csv"))
temp <- read_csv(here("Baseline_Survey/data/gps.csv"))
View(temp)
View(gps)
View(temp)
View(gps)
View(temp)
temp <- read_csv(here("Baseline_Survey/data/gps.csv")) %>% select(-X1)
View(temp)
temp <- read_csv(here("Baseline_Survey/data/gps.csv")) %>% select(-X1)
View(temp)
temp <- read_csv(here("Baseline_Survey/data/gps.csv")) %>% select(-X1) %>% mutate(gps1 = as.numeric(gps1))
View(temp)
str(gps)
str(temp)
temp <- read_csv(here("Baseline_Survey/data/gps.csv")) %>% select(-X1) %>% mutate(gps1 = as.integer(gps1))
str(temp)
gps <- read_csv(here("Baseline_Survey/data/gps.csv")) %>% select(-X1) %>% mutate(gps1 = as.integer(gps1))
gps <- read_csv(here("Baseline_Survey/data/gps.csv")) %>% select(-X1) %>% mutate(gps1 = as.integer(gps1))
View(gps)
#Transform GPS data into vector data
gps<-st_as_sf(x=gps,
crs="+proj=longlat +datum=WGS84 +no_defs",
coords=c("gpslon", "gpslat")) %>%
rename(village_code = gps1,
village_name = gps1a,
reserve_section = gpstrate)
gps = gps %>% rename(
hh_village_code = village_code
)
View(gps)
gps <- read_csv(here("Baseline_Survey/data/gps.csv")) %>% select(-X1) %>% mutate(gps1 = as.integer(gps1))
save.image("C:/Github/health-in-harmony-baseline-/Baseline_Survey/data/GPSnew.RData")
# Loading coordinates ---------------------------------------------------------------------
load(here("Baseline_Survey/data/GPSnew.RData"))
# Loading coordinates ---------------------------------------------------------------------
load(here("Baseline_Survey/data/GPSnew.RData"))
View(gps)
load("C:/Github/health-in-harmony-baseline-/Baseline_Survey/data/.RData")
shiny::runApp()
runApp()
library(shiny)
library(shinydashboard)
library(callr)
library(tidyverse)
library(leaflet)
library(tidyverse)
library(leaflet.extras)
library(viridis)
library(shinyWidgets)
library(shinythemes)
library(rhandsontable)
library(RColorBrewer)
library(sf)
library(shinycssloaders)
library(here)
# Loading coordinates ---------------------------------------------------------------------
load(here("Baseline_Survey/data/gps.RData"))
gpsoriginal <- gps
load(here("Baseline_Survey/data/GPSnew.RData"))
View(gps)
View(gpsoriginal)
#Transform GPS data into vector data
gps<-st_as_sf(x=gps,
crs="+proj=longlat +datum=WGS84 +no_defs",
coords=c("gpslon", "gpslat")) %>%
rename(village_code = gps1,
village_name = gps1a,
reserve_section = gpstrate)
gps = gps %>% rename(
hh_village_code = village_code
)
View(gps)
load(here("Baseline_Survey/data/GPSnew.RData"))
str(gps)
str(gpsoriginal)
gps <- gps %>% mutate(gpstrate = as.factor(gpstrate))
load(here("Baseline_Survey/data/GPSnew.RData"))
gps <- gps %>% mutate(gpstrate = as.factor(gpstrate))
save.image("C:/Github/health-in-harmony-baseline-/Baseline_Survey/data/GPSnew.RData")
runApp()
# Loading coordinates ---------------------------------------------------------------------
load(here("Baseline_Survey/data/GPSnew.RData"))
View(gps)
# Loading coordinates ---------------------------------------------------------------------
load(here("Baseline_Survey/data/GPSnew.RData"))
read_csv("villages.csv")
read_csv("villages.csv")
newcoords <- read_csv("villages.csv")
View(newcoords)
newcoords <- read_csv("villages.csv") %>% select(-Description)
View(newcoords)
View(gps)
View(gps)
View(newcoords)
gps %>% left_join(newcoords, by = c('gps1a' = 'Name'))
gps %>% left_join(newcoords, by = c('gps1a' = 'Name')) %>% mutate(gpslat = lat,
gpslon = lon)
gps %>% left_join(newcoords, by = c('gps1a' = 'Name')) %>% mutate(gpslat = lat,
gpslon = lon) %>% select(-lat, -lon)
# Loading coordinates ---------------------------------------------------------------------
load(here("Baseline_Survey/data/GPSnew.RData"))
newcoords <- read_csv("villages.csv") %>% select(-Description)
gps <- gps  %>% left_join(newcoords, by = c('gps1a' = 'Name')) %>% mutate(gpslat = lat,
gpslon = lon) %>% select(-lat, -lon)
View(gps)
# Loading coordinates ---------------------------------------------------------------------
load(here("Baseline_Survey/data/GPSnew.RData"))
newcoords <- read_csv("villages.csv") %>% select(-Description)
gps2 <- gps  %>% left_join(newcoords, by = c('gps1a' = 'Name')) %>% mutate(gpslat = lat,
gpslon = lon) %>% select(-lat, -lon)
View(gps2)
View(gps)
load(here("Baseline_Survey/data/GPSnew.RData"))
newcoords <- read_csv("villages.csv") %>% select(-Description)
gps2 <- gps  %>% left_join(newcoords, by = c('gps1a' = 'Name')) %>% mutate(gpslat = ifelse(is.null(lat), gpslat, lat),
gpslon = ifelse(is.null(lon), gpslon, lon)) %>% select(-lat, -lon)
View(gps2)
load(here("Baseline_Survey/data/GPSnew.RData"))
newcoords <- read_csv("villages.csv") %>% select(-Description)
gps2 <- gps  %>% left_join(newcoords, by = c('gps1a' = 'Name')) %>%
mutate(gpslat = ifelse(is.null(lat), gpslat, lat),
gpslon = ifelse(is.null(lon), gpslon, lon)) %>%
select(-lat, -lon)
View(gps)
View(gps2)
View(newcoords)
View(gps2)
load(here("Baseline_Survey/data/GPSnew.RData"))
newcoords <- read_csv("villages.csv") %>% select(-Description)
gps2 <- gps  %>% left_join(newcoords, by = c('gps1a' = 'Name')) %>% rowwise() %>%
mutate(gpslat = ifelse(is.null(lat), gpslat, lat),
gpslon = ifelse(is.null(lon), gpslon, lon)) %>%
select(-lat, -lon)
View(gps2)
View(gps2)
View(gps2)
View(gps)
View(gps2)
gps[19,]
gps[19,'gpslat']
as.numeric(gps[19,'gpslat'])
roud(as.numeric(gps[19,'gpslat']),20)
round(as.numeric(gps[19,'gpslat']),20)
sprintf(as.numeric(gps[19,'gpslat']))
sprintf("%.100f",as.numeric(gps[19,'gpslat']))
View(gps2)
View(gps)
gps %>% mutate(gps1a = ifelse(gps1a == "NAMOHORA", "NAMAHORA", gps1a))
# Loading coordinates ---------------------------------------------------------------------
load(here("Baseline_Survey/data/GPSnew.RData"))
newcoords <- read_csv("villages.csv") %>% select(-Description)
gps <- gps %>% mutate(gps1a = ifelse(gps1a == "NAMOHORA", "NAMAHORA", gps1a))
View(gps)
gps2 <- gps  %>% left_join(newcoords, by = c('gps1a' = 'Name')) %>% rowwise() %>%
mutate(gpslat = ifelse(is.null(lat), gpslat, lat),
gpslon = ifelse(is.null(lon), gpslon, lon)) %>%
select(-lat, -lon)
View(gps2)
load(here("Baseline_Survey/data/GPSnew.RData"))
newcoords <- read_csv("villages.csv") %>% select(-Description)
gps <- gps %>% mutate(gps1a = ifelse(gps1a == "NAMOHORA", "NAMAHORA", gps1a))
gps <- gps  %>% left_join(newcoords, by = c('gps1a' = 'Name')) %>% rowwise() %>%
mutate(gpslat = ifelse(is.null(lat), gpslat, lat),
gpslon = ifelse(is.null(lon), gpslon, lon)) %>%
select(-lat, -lon)
View(newcoords)
rm(newcoods)
rm(newcoords)
save.image("C:/Github/health-in-harmony-baseline-/Baseline_Survey/data/GPSnew.RData")
runApp()
View(gps)
runApp()
runApp()
runApp()
runApp()
leaflet(
options = leafletOptions(minZoom = 12, maxZoom = 14)
) %>%
setMaxBounds(lng1 = 47.493221, lat1 = -23.205126, lng2 = 47.922476, lat2 = -22.890085) %>%
addProviderTiles('CartoDB.Positron') %>%
addResetMapButton()
runApp()
runApp()
runApp()
